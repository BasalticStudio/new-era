# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord-import` gem.
# Please instead update this file by running `bin/tapioca gem activerecord-import`.

module ActiveRecord
  extend ::ActiveSupport::Autoload

  class << self
    def action_on_strict_loading_violation; end
    def action_on_strict_loading_violation=(_arg0); end
    def application_record_class; end
    def application_record_class=(_arg0); end
    def async_query_executor; end
    def async_query_executor=(_arg0); end
    def default_timezone; end
    def default_timezone=(default_timezone); end
    def dump_schema_after_migration; end
    def dump_schema_after_migration=(_arg0); end
    def dump_schemas; end
    def dump_schemas=(_arg0); end
    def eager_load!; end
    def error_on_ignored_order; end
    def error_on_ignored_order=(_arg0); end
    def gem_version; end
    def global_executor_concurrency; end
    def global_executor_concurrency=(global_executor_concurrency); end
    def global_thread_pool_async_query_executor; end
    def index_nested_attribute_errors; end
    def index_nested_attribute_errors=(_arg0); end
    def lazily_load_schema_cache; end
    def lazily_load_schema_cache=(_arg0); end
    def legacy_connection_handling; end
    def legacy_connection_handling=(_arg0); end
    def maintain_test_schema; end
    def maintain_test_schema=(_arg0); end
    def query_transformers; end
    def query_transformers=(_arg0); end
    def queues; end
    def queues=(_arg0); end
    def reading_role; end
    def reading_role=(_arg0); end
    def schema_cache_ignored_tables; end
    def schema_cache_ignored_tables=(_arg0); end
    def schema_format; end
    def schema_format=(_arg0); end
    def suppress_multiple_database_warning; end
    def suppress_multiple_database_warning=(_arg0); end
    def timestamped_migrations; end
    def timestamped_migrations=(_arg0); end
    def verbose_query_logs; end
    def verbose_query_logs=(_arg0); end
    def verify_foreign_keys_for_fixtures; end
    def verify_foreign_keys_for_fixtures=(_arg0); end
    def version; end
    def warn_on_records_fetched_greater_than; end
    def warn_on_records_fetched_greater_than=(_arg0); end
    def writing_role; end
    def writing_role=(_arg0); end
  end
end

class ActiveRecord::Associations::CollectionAssociation < ::ActiveRecord::Associations::Association
  def add_to_target(record, skip_callbacks: T.unsafe(nil), replace: T.unsafe(nil), &block); end
  def build(attributes = T.unsafe(nil), &block); end
  def bulk_import(*args, &block); end
  def concat(*records); end
  def delete(*records); end
  def delete_all(dependent = T.unsafe(nil)); end
  def destroy(*records); end
  def destroy_all; end
  def empty?; end
  def find(*args); end
  def find_from_target?; end
  def ids_reader; end
  def ids_writer(ids); end
  def import(*args, &block); end
  def include?(record); end
  def load_target; end
  def null_scope?; end
  def reader; end
  def replace(other_array); end
  def reset; end
  def scope; end
  def size; end
  def target=(record); end
  def writer(records); end

  private

  def _create_record(attributes, raise = T.unsafe(nil), &block); end
  def callback(method, record); end
  def callbacks_for(callback_name); end
  def concat_records(records, raise = T.unsafe(nil)); end
  def delete_or_destroy(records, method); end
  def delete_records(records, method); end
  def find_by_scan(*args); end
  def include_in_memory?(record); end
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil), &block); end
  def merge_target_lists(persisted, memory); end
  def remove_records(existing_records, records, method); end
  def replace_common_records_in_memory(new_target, original_target); end
  def replace_on_target(record, skip_callbacks, replace:, inversing: T.unsafe(nil)); end
  def replace_records(new_target, original_target); end
  def transaction(&block); end
end

class ActiveRecord::Associations::CollectionProxy < ::ActiveRecord::Relation
  def initialize(klass, association, **_arg2); end

  def <<(*records); end
  def ==(other); end
  def _select!(*_arg0, &_arg1); end
  def and(*_arg0, &_arg1); end
  def and!(*_arg0, &_arg1); end
  def annotate(*_arg0, &_arg1); end
  def annotate!(*_arg0, &_arg1); end
  def annotate_values(*_arg0, &_arg1); end
  def annotate_values=(arg); end
  def append(*records); end
  def arel(*_arg0, &_arg1); end
  def build(attributes = T.unsafe(nil), &block); end
  def bulk_import(*args, &block); end
  def calculate(operation, column_name); end
  def clear; end
  def concat(*records); end
  def construct_join_dependency(*_arg0, &_arg1); end
  def create(attributes = T.unsafe(nil), &block); end
  def create!(attributes = T.unsafe(nil), &block); end
  def create_with(*_arg0, &_arg1); end
  def create_with!(*_arg0, &_arg1); end
  def create_with_value(*_arg0, &_arg1); end
  def create_with_value=(arg); end
  def delete(*records); end
  def delete_all(dependent = T.unsafe(nil)); end
  def destroy(*records); end
  def destroy_all; end
  def distinct(*_arg0, &_arg1); end
  def distinct!(*_arg0, &_arg1); end
  def distinct_value(*_arg0, &_arg1); end
  def distinct_value=(arg); end
  def eager_load(*_arg0, &_arg1); end
  def eager_load!(*_arg0, &_arg1); end
  def eager_load_values(*_arg0, &_arg1); end
  def eager_load_values=(arg); end
  def empty?; end
  def except(*_arg0, &_arg1); end
  def excluding(*_arg0, &_arg1); end
  def excluding!(*_arg0, &_arg1); end
  def extending(*_arg0, &_arg1); end
  def extending!(*_arg0, &_arg1); end
  def extending_values(*_arg0, &_arg1); end
  def extending_values=(arg); end
  def extensions(*_arg0, &_arg1); end
  def extract_associated(*_arg0, &_arg1); end
  def find(*args); end
  def from(*_arg0, &_arg1); end
  def from!(*_arg0, &_arg1); end
  def from_clause(*_arg0, &_arg1); end
  def from_clause=(arg); end
  def group(*_arg0, &_arg1); end
  def group!(*_arg0, &_arg1); end
  def group_values(*_arg0, &_arg1); end
  def group_values=(arg); end
  def having(*_arg0, &_arg1); end
  def having!(*_arg0, &_arg1); end
  def having_clause(*_arg0, &_arg1); end
  def having_clause=(arg); end
  def import(*args, &block); end
  def in_order_of(*_arg0, &_arg1); end
  def include?(record); end
  def includes(*_arg0, &_arg1); end
  def includes!(*_arg0, &_arg1); end
  def includes_values(*_arg0, &_arg1); end
  def includes_values=(arg); end
  def insert(*_arg0, &_arg1); end
  def insert!(*_arg0, &_arg1); end
  def insert_all(*_arg0, &_arg1); end
  def insert_all!(*_arg0, &_arg1); end
  def inspect; end
  def invert_where(*_arg0, &_arg1); end
  def invert_where!(*_arg0, &_arg1); end
  def joins(*_arg0, &_arg1); end
  def joins!(*_arg0, &_arg1); end
  def joins_values(*_arg0, &_arg1); end
  def joins_values=(arg); end
  def last(limit = T.unsafe(nil)); end
  def left_joins(*_arg0, &_arg1); end
  def left_outer_joins(*_arg0, &_arg1); end
  def left_outer_joins!(*_arg0, &_arg1); end
  def left_outer_joins_values(*_arg0, &_arg1); end
  def left_outer_joins_values=(arg); end
  def limit(*_arg0, &_arg1); end
  def limit!(*_arg0, &_arg1); end
  def limit_value(*_arg0, &_arg1); end
  def limit_value=(arg); end
  def load_target; end
  def loaded; end
  def loaded?; end
  def lock(*_arg0, &_arg1); end
  def lock!(*_arg0, &_arg1); end
  def lock_value(*_arg0, &_arg1); end
  def lock_value=(arg); end
  def merge(*_arg0, &_arg1); end
  def merge!(*_arg0, &_arg1); end
  def new(attributes = T.unsafe(nil), &block); end
  def none(*_arg0, &_arg1); end
  def none!(*_arg0, &_arg1); end
  def offset(*_arg0, &_arg1); end
  def offset!(*_arg0, &_arg1); end
  def offset_value(*_arg0, &_arg1); end
  def offset_value=(arg); end
  def only(*_arg0, &_arg1); end
  def optimizer_hints(*_arg0, &_arg1); end
  def optimizer_hints!(*_arg0, &_arg1); end
  def optimizer_hints_values(*_arg0, &_arg1); end
  def optimizer_hints_values=(arg); end
  def or(*_arg0, &_arg1); end
  def or!(*_arg0, &_arg1); end
  def order(*_arg0, &_arg1); end
  def order!(*_arg0, &_arg1); end
  def order_values(*_arg0, &_arg1); end
  def order_values=(arg); end
  def pluck(*column_names); end
  def preload(*_arg0, &_arg1); end
  def preload!(*_arg0, &_arg1); end
  def preload_values(*_arg0, &_arg1); end
  def preload_values=(arg); end
  def prepend(*args); end
  def proxy_association; end
  def push(*records); end
  def readonly(*_arg0, &_arg1); end
  def readonly!(*_arg0, &_arg1); end
  def readonly_value(*_arg0, &_arg1); end
  def readonly_value=(arg); end
  def records; end
  def references(*_arg0, &_arg1); end
  def references!(*_arg0, &_arg1); end
  def references_values(*_arg0, &_arg1); end
  def references_values=(arg); end
  def reload; end
  def reorder(*_arg0, &_arg1); end
  def reorder!(*_arg0, &_arg1); end
  def reordering_value(*_arg0, &_arg1); end
  def reordering_value=(arg); end
  def replace(other_array); end
  def reselect(*_arg0, &_arg1); end
  def reselect!(*_arg0, &_arg1); end
  def reset; end
  def reset_scope; end
  def reverse_order(*_arg0, &_arg1); end
  def reverse_order!(*_arg0, &_arg1); end
  def reverse_order_value(*_arg0, &_arg1); end
  def reverse_order_value=(arg); end
  def rewhere(*_arg0, &_arg1); end
  def scope; end
  def scoping(*_arg0, &_arg1); end
  def select_values(*_arg0, &_arg1); end
  def select_values=(arg); end
  def size; end
  def skip_preloading!(*_arg0, &_arg1); end
  def skip_query_cache!(*_arg0, &_arg1); end
  def skip_query_cache_value(*_arg0, &_arg1); end
  def skip_query_cache_value=(arg); end
  def spawn(*_arg0, &_arg1); end
  def strict_loading(*_arg0, &_arg1); end
  def strict_loading!(*_arg0, &_arg1); end
  def strict_loading_value(*_arg0, &_arg1); end
  def strict_loading_value=(arg); end
  def structurally_compatible?(*_arg0, &_arg1); end
  def take(limit = T.unsafe(nil)); end
  def target; end
  def uniq!(*_arg0, &_arg1); end
  def unscope(*_arg0, &_arg1); end
  def unscope!(*_arg0, &_arg1); end
  def unscope_values(*_arg0, &_arg1); end
  def unscope_values=(arg); end
  def upsert(*_arg0, &_arg1); end
  def upsert_all(*_arg0, &_arg1); end
  def values(*_arg0, &_arg1); end
  def where(*_arg0, &_arg1); end
  def where!(*_arg0, &_arg1); end
  def where_clause(*_arg0, &_arg1); end
  def where_clause=(arg); end
  def without(*_arg0, &_arg1); end

  private

  def exec_queries; end
  def find_from_target?; end
  def find_nth_from_last(index); end
  def find_nth_with_limit(index, limit); end
  def null_scope?; end
end

class ActiveRecord::Base
  include ::ActiveRecord::Core
  include ::ActiveRecord::Persistence
  include ::ActiveRecord::ReadonlyAttributes
  include ::ActiveRecord::ModelSchema
  include ::ActiveRecord::Inheritance
  include ::ActiveRecord::Scoping
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named
  include ::ActiveRecord::Sanitization
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveRecord::AttributeAssignment
  include ::ActiveModel::Conversion
  include ::ActiveRecord::Integration
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveRecord::Validations
  include ::ActiveRecord::CounterCache
  include ::ActiveRecord::Attributes
  include ::ActiveRecord::Locking::Optimistic
  include ::ActiveRecord::Locking::Pessimistic
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods
  include ::ActiveRecord::Base::GeneratedAttributeMethods
  include ::ActiveRecord::Base::GeneratedAssociationMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization
  include ::ActiveRecord::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveRecord::Timestamp
  include ::ActiveRecord::Associations
  include ::ActiveModel::SecurePassword
  include ::ActiveRecord::AutosaveAssociation
  include ::ActiveRecord::NestedAttributes
  include ::ActiveRecord::Transactions
  include ::ActiveRecord::TouchLater
  include ::ActiveRecord::NoTouching
  include ::ActiveRecord::Reflection
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  include ::ActiveRecord::Serialization
  include ::ActiveRecord::Store
  include ::ActiveRecord::SecureToken
  include ::ActiveRecord::SignedId
  include ::ActiveRecord::Suppressor
  include ::ActiveRecord::Encryption::EncryptableRecord
  extend ::ActiveModel::Naming
  extend ::ActiveSupport::Benchmarkable
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveRecord::ConnectionHandling
  extend ::ActiveRecord::QueryCache::ClassMethods
  extend ::ActiveRecord::Querying
  extend ::ActiveModel::Translation
  extend ::ActiveRecord::Translation
  extend ::ActiveRecord::DynamicMatchers
  extend ::ActiveRecord::DelegatedType
  extend ::ActiveRecord::Explain
  extend ::ActiveRecord::Enum
  extend ::ActiveRecord::Delegation::DelegateCache
  extend ::ActiveRecord::Aggregations::ClassMethods
  extend ::ActiveRecord::Core::ClassMethods
  extend ::ActiveRecord::Persistence::ClassMethods
  extend ::ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ::ActiveRecord::ModelSchema::ClassMethods
  extend ::ActiveRecord::Inheritance::ClassMethods
  extend ::ActiveRecord::Scoping::ClassMethods
  extend ::ActiveRecord::Scoping::Default::ClassMethods
  extend ::ActiveRecord::Scoping::Named::ClassMethods
  extend ::ActiveRecord::Sanitization::ClassMethods
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveRecord::Integration::ClassMethods
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveRecord::Validations::ClassMethods
  extend ::ActiveRecord::CounterCache::ClassMethods
  extend ::ActiveRecord::Attributes::ClassMethods
  extend ::ActiveRecord::Locking::Optimistic::ClassMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Dirty::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ::ActiveRecord::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::Callbacks::ClassMethods
  extend ::ActiveRecord::Timestamp::ClassMethods
  extend ::ActiveRecord::Associations::ClassMethods
  extend ::ActiveModel::SecurePassword::ClassMethods
  extend ::ActiveRecord::AutosaveAssociation::ClassMethods
  extend ::ActiveRecord::NestedAttributes::ClassMethods
  extend ::ActiveRecord::Transactions::ClassMethods
  extend ::ActiveRecord::NoTouching::ClassMethods
  extend ::ActiveRecord::Reflection::ClassMethods
  extend ::ActiveRecord::Store::ClassMethods
  extend ::ActiveRecord::SecureToken::ClassMethods
  extend ::ActiveRecord::SignedId::ClassMethods
  extend ::ActiveRecord::Suppressor::ClassMethods
  extend ::ActiveRecord::Encryption::EncryptableRecord::ClassMethods
  extend ::OrmAdapter::ToAdapter
  extend ::Devise::Models
  extend ::ActiveRecord::Import::Connection

  def __callbacks; end
  def __callbacks?; end
  def _before_commit_callbacks; end
  def _commit_callbacks; end
  def _create_callbacks; end
  def _destroy_callbacks; end
  def _find_callbacks; end
  def _initialize_callbacks; end
  def _reflections; end
  def _reflections?; end
  def _rollback_callbacks; end
  def _run_before_commit_callbacks(&block); end
  def _run_commit_callbacks(&block); end
  def _run_create_callbacks(&block); end
  def _run_destroy_callbacks(&block); end
  def _run_find_callbacks(&block); end
  def _run_initialize_callbacks(&block); end
  def _run_rollback_callbacks(&block); end
  def _run_save_callbacks(&block); end
  def _run_touch_callbacks(&block); end
  def _run_update_callbacks(&block); end
  def _run_validate_callbacks(&block); end
  def _run_validation_callbacks(&block); end
  def _save_callbacks; end
  def _touch_callbacks; end
  def _update_callbacks; end
  def _validate_callbacks; end
  def _validation_callbacks; end
  def _validators; end
  def _validators?; end
  def aggregate_reflections; end
  def aggregate_reflections?; end
  def attribute_aliases; end
  def attribute_aliases?; end
  def attribute_method_matchers; end
  def attribute_method_matchers?; end
  def automatic_scope_inversing; end
  def automatic_scope_inversing?; end
  def cache_timestamp_format; end
  def cache_timestamp_format?; end
  def cache_versioning; end
  def cache_versioning?; end
  def collection_cache_versioning; end
  def collection_cache_versioning?; end
  def column_for_attribute(*_arg0, &_arg1); end
  def default_connection_handler; end
  def default_connection_handler?; end
  def default_role; end
  def default_role?; end
  def default_scope_override; end
  def default_scopes; end
  def default_shard; end
  def default_shard?; end
  def defined_enums; end
  def defined_enums?; end
  def destroy_association_async_job; end
  def encrypted_attributes; end
  def encrypted_attributes=(_arg0); end
  def encrypted_attributes?; end
  def include_root_in_json; end
  def include_root_in_json?; end
  def lock_optimistically; end
  def lock_optimistically?; end
  def logger; end
  def logger?; end
  def model_name(*_arg0, &_arg1); end
  def nested_attributes_options; end
  def nested_attributes_options?; end
  def partial_inserts; end
  def partial_inserts?; end
  def partial_updates; end
  def partial_updates?; end
  def pluralize_table_names; end
  def pluralize_table_names?; end
  def primary_key_prefix_type; end
  def primary_key_prefix_type?; end
  def record_timestamps; end
  def record_timestamps=(_arg0); end
  def record_timestamps?; end
  def signed_id_verifier_secret; end
  def signed_id_verifier_secret?; end
  def skip_time_zone_conversion_for_attributes; end
  def skip_time_zone_conversion_for_attributes?; end
  def store_full_class_name; end
  def store_full_class_name?; end
  def store_full_sti_class; end
  def store_full_sti_class?; end

  # See ActiveRecord::ConnectionAdapters::AbstractAdapter.synchronize
  def synchronize(instances, key = T.unsafe(nil)); end

  def table_name_prefix; end
  def table_name_prefix?; end
  def table_name_suffix; end
  def table_name_suffix?; end
  def time_zone_aware_attributes; end
  def time_zone_aware_attributes?; end
  def time_zone_aware_types; end
  def time_zone_aware_types?; end
  def type_for_attribute(*_arg0, &_arg1); end
  def validation_context; end

  private

  def validation_context=(_arg0); end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _attr_readonly; end
    def _attr_readonly=(value); end
    def _attr_readonly?; end
    def _before_commit_callbacks; end
    def _before_commit_callbacks=(value); end
    def _commit_callbacks; end
    def _commit_callbacks=(value); end
    def _create_callbacks; end
    def _create_callbacks=(value); end
    def _destroy_callbacks; end
    def _destroy_callbacks=(value); end
    def _find_callbacks; end
    def _find_callbacks=(value); end
    def _initialize_callbacks; end
    def _initialize_callbacks=(value); end
    def _reflections; end
    def _reflections=(value); end
    def _reflections?; end
    def _rollback_callbacks; end
    def _rollback_callbacks=(value); end
    def _save_callbacks; end
    def _save_callbacks=(value); end
    def _touch_callbacks; end
    def _touch_callbacks=(value); end
    def _update_callbacks; end
    def _update_callbacks=(value); end
    def _validate_callbacks; end
    def _validate_callbacks=(value); end
    def _validation_callbacks; end
    def _validation_callbacks=(value); end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def after_create(*args, **options, &block); end
    def after_destroy(*args, **options, &block); end
    def after_find(*args, **options, &block); end
    def after_initialize(*args, **options, &block); end
    def after_save(*args, **options, &block); end
    def after_touch(*args, **options, &block); end
    def after_update(*args, **options, &block); end
    def aggregate_reflections; end
    def aggregate_reflections=(value); end
    def aggregate_reflections?; end
    def application_record_class?; end
    def around_create(*args, **options, &block); end
    def around_destroy(*args, **options, &block); end
    def around_save(*args, **options, &block); end
    def around_update(*args, **options, &block); end
    def asynchronous_queries_session; end
    def asynchronous_queries_tracker; end
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def attributes_to_define_after_schema_loads; end
    def attributes_to_define_after_schema_loads=(value); end
    def attributes_to_define_after_schema_loads?; end
    def automatic_scope_inversing; end
    def automatic_scope_inversing=(value); end
    def automatic_scope_inversing?; end
    def before_create(*args, **options, &block); end
    def before_destroy(*args, **options, &block); end
    def before_save(*args, **options, &block); end
    def before_update(*args, **options, &block); end
    def belongs_to_required_by_default; end
    def belongs_to_required_by_default=(value); end
    def belongs_to_required_by_default?; end

    # Imports a collection of values to the database.
    #
    # This is more efficient than using ActiveRecord::Base#create or
    # ActiveRecord::Base#save multiple times. This method works well if
    # you want to create more than one record at a time and do not care
    # about having ActiveRecord objects returned for each record
    # inserted.
    #
    # This can be used with or without validations. It does not utilize
    # the ActiveRecord::Callbacks during creation/modification while
    # performing the import.
    #
    # == Usage
    #  Model.import array_of_models
    #  Model.import column_names, array_of_models
    #  Model.import array_of_hash_objects
    #  Model.import column_names, array_of_hash_objects
    #  Model.import column_names, array_of_values
    #  Model.import column_names, array_of_values, options
    #
    # ==== Model.import array_of_models
    #
    # With this form you can call _import_ passing in an array of model
    # objects that you want updated.
    #
    # ==== Model.import column_names, array_of_values
    #
    # The first parameter +column_names+ is an array of symbols or
    # strings which specify the columns that you want to update.
    #
    # The second parameter, +array_of_values+, is an array of
    # arrays. Each subarray is a single set of values for a new
    # record. The order of values in each subarray should match up to
    # the order of the +column_names+.
    #
    # ==== Model.import column_names, array_of_values, options
    #
    # The first two parameters are the same as the above form. The third
    # parameter, +options+, is a hash. This is optional. Please see
    # below for what +options+ are available.
    #
    # == Options
    # * +validate+ - true|false, tells import whether or not to use
    #   ActiveRecord validations. Validations are enforced by default.
    #   It skips the uniqueness validation for performance reasons.
    #   You can find more details here:
    #   https://github.com/zdennis/activerecord-import/issues/228
    # * +ignore+ - true|false, an alias for on_duplicate_key_ignore.
    # * +on_duplicate_key_ignore+ - true|false, tells import to discard
    #   records that contain duplicate keys. For Postgres 9.5+ it adds
    #   ON CONFLICT DO NOTHING, for MySQL it uses INSERT IGNORE, and for
    #   SQLite it uses INSERT OR IGNORE. Cannot be enabled on a
    #   recursive import. For database adapters that normally support
    #   setting primary keys on imported objects, this option prevents
    #   that from occurring.
    # * +on_duplicate_key_update+ - :all, an Array, or Hash, tells import to
    #   use MySQL's ON DUPLICATE KEY UPDATE or Postgres/SQLite ON CONFLICT
    #   DO UPDATE ability. See On Duplicate Key Update below.
    # * +synchronize+ - an array of ActiveRecord instances for the model
    #   that you are currently importing data into. This synchronizes
    #   existing model instances in memory with updates from the import.
    # * +timestamps+ - true|false, tells import to not add timestamps
    #   (if false) even if record timestamps is disabled in ActiveRecord::Base
    # * +recursive+ - true|false, tells import to import all has_many/has_one
    #   associations if the adapter supports setting the primary keys of the
    #   newly imported objects. PostgreSQL only.
    # * +batch_size+ - an integer value to specify the max number of records to
    #   include per insert. Defaults to the total number of records to import.
    #
    # == Examples
    #  class BlogPost < ActiveRecord::Base ; end
    #
    #  # Example using array of model objects
    #  posts = [ BlogPost.new author_name: 'Zach Dennis', title: 'AREXT',
    #            BlogPost.new author_name: 'Zach Dennis', title: 'AREXT2',
    #            BlogPost.new author_name: 'Zach Dennis', title: 'AREXT3' ]
    #  BlogPost.import posts
    #
    #  # Example using array_of_hash_objects
    #  # NOTE: column_names will be determined by using the keys of the first hash in the array. If later hashes in the
    #  # array have different keys an exception will be raised. If you have hashes to import with different sets of keys
    #  # we recommend grouping these into batches before importing.
    #  values = [ {author_name: 'zdennis', title: 'test post'} ], [ {author_name: 'jdoe', title: 'another test post'} ] ]
    #  BlogPost.import values
    #
    #  # Example using column_names and array_of_hash_objects
    #  columns = [ :author_name, :title ]
    #  values = [ {author_name: 'zdennis', title: 'test post'} ], [ {author_name: 'jdoe', title: 'another test post'} ] ]
    #  BlogPost.import columns, values
    #
    #  # Example using column_names and array_of_values
    #  columns = [ :author_name, :title ]
    #  values = [ [ 'zdennis', 'test post' ], [ 'jdoe', 'another test post' ] ]
    #  BlogPost.import columns, values
    #
    #  # Example using column_names, array_of_value and options
    #  columns = [ :author_name, :title ]
    #  values = [ [ 'zdennis', 'test post' ], [ 'jdoe', 'another test post' ] ]
    #  BlogPost.import( columns, values, validate: false  )
    #
    #  # Example synchronizing existing instances in memory
    #  post = BlogPost.where(author_name: 'zdennis').first
    #  puts post.author_name # => 'zdennis'
    #  columns = [ :author_name, :title ]
    #  values = [ [ 'yoda', 'test post' ] ]
    #  BlogPost.import posts, synchronize: [ post ]
    #  puts post.author_name # => 'yoda'
    #
    #  # Example synchronizing unsaved/new instances in memory by using a uniqued imported field
    #  posts = [BlogPost.new(title: "Foo"), BlogPost.new(title: "Bar")]
    #  BlogPost.import posts, synchronize: posts, synchronize_keys: [:title]
    #  puts posts.first.persisted? # => true
    #
    # == On Duplicate Key Update (MySQL)
    #
    # The :on_duplicate_key_update option can be either :all, an Array, or a Hash.
    #
    # ==== Using :all
    #
    # The :on_duplicate_key_update option can be set to :all. All columns
    # other than the primary key are updated. If a list of column names is
    # supplied, only those columns will be updated. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: :all
    #
    # ==== Using an Array
    #
    # The :on_duplicate_key_update option can be an array of column
    # names. The column names are the only fields that are updated if
    # a duplicate record is found. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: [ :date_modified, :content, :author ]
    #
    # ====  Using A Hash
    #
    # The :on_duplicate_key_update option can be a hash of column names
    # to model attribute name mappings. This gives you finer grained
    # control over what fields are updated with what attributes on your
    # model. Below is an example:
    #
    #   BlogPost.import columns, attributes, on_duplicate_key_update: { title: :title }
    #
    # == On Duplicate Key Update (Postgres 9.5+ and SQLite 3.24+)
    #
    # The :on_duplicate_key_update option can be :all, an Array, or a Hash with up to
    # three attributes, :conflict_target (and optionally :index_predicate) or
    # :constraint_name (Postgres), and :columns.
    #
    # ==== Using :all
    #
    # The :on_duplicate_key_update option can be set to :all. All columns
    # other than the primary key are updated. If a list of column names is
    # supplied, only those columns will be updated. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: :all
    #
    # ==== Using an Array
    #
    # The :on_duplicate_key_update option can be an array of column
    # names. This option only handles inserts that conflict with the
    # primary key. If a table does not have a primary key, this will
    # not work. The column names are the only fields that are updated
    # if a duplicate record is found. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: [ :date_modified, :content, :author ]
    #
    # ====  Using a Hash
    #
    # The :on_duplicate_key_update option can be a hash with up to three
    # attributes, :conflict_target (and optionally :index_predicate) or
    # :constraint_name, and :columns. Unlike MySQL, Postgres requires the
    # conflicting constraint to be explicitly specified. Using this option
    # allows you to specify a constraint other than the primary key.
    #
    # ===== :conflict_target
    #
    # The :conflict_target attribute specifies the columns that make up the
    # conflicting unique constraint and can be a single column or an array of
    # column names. This attribute is ignored if :constraint_name is included,
    # but it is the preferred method of identifying a constraint. It will
    # default to the primary key. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { conflict_target: [ :author_id, :slug ], columns: [ :date_modified ] }
    #
    # ===== :index_predicate
    #
    # The :index_predicate attribute optionally specifies a WHERE condition
    # on :conflict_target, which is required for matching against partial
    # indexes. This attribute is ignored if :constraint_name is included.
    # Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { conflict_target: [ :author_id, :slug ], index_predicate: 'status <> 0', columns: [ :date_modified ] }
    #
    # ===== :constraint_name
    #
    # The :constraint_name attribute explicitly identifies the conflicting
    # unique index by name. Postgres documentation discourages using this method
    # of identifying an index unless absolutely necessary. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { constraint_name: :blog_posts_pkey, columns: [ :date_modified ] }
    #
    # ===== :condition
    #
    # The :condition attribute optionally specifies a WHERE condition
    # on :conflict_action. Only rows for which this expression returns true will be updated.
    # Note that it's evaluated last, after a conflict has been identified as a candidate to update.
    # Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { conflict_target: [ :author_id ], condition: "blog_posts.title NOT LIKE '%sample%'", columns: [ :author_name ] }
    #
    # ===== :columns
    #
    # The :columns attribute can be either :all, an Array, or a Hash.
    #
    # ===== Using :all
    #
    # The :columns attribute can be :all. All columns other than the primary key will be updated.
    # If a list of column names is supplied, only those columns will be updated.
    # Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { conflict_target: :slug, columns: :all }
    #
    # ===== Using an Array
    #
    # The :columns attribute can be an array of column names. The column names
    # are the only fields that are updated if a duplicate record is found.
    # Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { conflict_target: :slug, columns: [ :date_modified, :content, :author ] }
    #
    # =====  Using a Hash
    #
    # The :columns option can be a hash of column names to model attribute name
    # mappings. This gives you finer grained control over what fields are updated
    # with what attributes on your model. Below is an example:
    #
    #   BlogPost.import columns, attributes, on_duplicate_key_update: { conflict_target: :slug, columns: { title: :title } }
    #
    # = Returns
    # This returns an object which responds to +failed_instances+ and +num_inserts+.
    # * failed_instances - an array of objects that fails validation and were not committed to the database. An empty array if no validation is performed.
    # * num_inserts - the number of insert statements it took to import the data
    # * ids - the primary keys of the imported ids if the adapter supports it, otherwise an empty array.
    # * results - import results if the adapter supports it, otherwise an empty array.
    def bulk_import(*args); end

    # Imports a collection of values if all values are valid. Import fails at the
    # first encountered validation error and raises ActiveRecord::RecordInvalid
    # with the failed instance.
    def bulk_import!(*args); end

    def cache_timestamp_format; end
    def cache_timestamp_format=(value); end
    def cache_timestamp_format?; end
    def cache_versioning; end
    def cache_versioning=(value); end
    def cache_versioning?; end
    def collection_cache_versioning; end
    def collection_cache_versioning=(value); end
    def collection_cache_versioning?; end
    def configurations; end
    def configurations=(config); end
    def connected_to_stack; end
    def connection_class; end
    def connection_class=(b); end
    def connection_class?; end
    def connection_class_for_self; end
    def connection_handler; end
    def connection_handler=(handler); end
    def connection_handlers; end
    def connection_handlers=(handlers); end
    def current_preventing_writes; end
    def current_role; end
    def current_shard; end
    def default_connection_handler; end
    def default_connection_handler=(value); end
    def default_connection_handler?; end
    def default_role; end
    def default_role=(value); end
    def default_role?; end
    def default_scope_override; end
    def default_scope_override=(value); end
    def default_scopes; end
    def default_scopes=(value); end
    def default_shard; end
    def default_shard=(value); end
    def default_shard?; end
    def defined_enums; end
    def defined_enums=(value); end
    def defined_enums?; end
    def destroy_association_async_job; end
    def destroy_association_async_job=(value); end
    def encrypted_attributes; end
    def encrypted_attributes=(value); end
    def encrypted_attributes?; end
    def enumerate_columns_in_select_statements; end
    def enumerate_columns_in_select_statements=(value); end
    def enumerate_columns_in_select_statements?; end
    def has_many_inversing; end
    def has_many_inversing=(value); end
    def has_many_inversing?; end
    def immutable_strings_by_default; end
    def immutable_strings_by_default=(value); end
    def immutable_strings_by_default?; end
    def implicit_order_column; end
    def implicit_order_column=(value); end
    def implicit_order_column?; end
    def import(*args); end
    def import!(*args); end
    def import_helper(*args); end

    # Imports the passed in +column_names+ and +array_of_attributes+
    # given the passed in +options+ Hash with validations. Returns an
    # object with the methods +failed_instances+ and +num_inserts+.
    # +failed_instances+ is an array of instances that failed validations.
    # +num_inserts+ is the number of inserts it took to import the data. See
    # ActiveRecord::Base.import for more information on
    # +column_names+, +array_of_attributes+ and +options+.
    #
    # @yield [failed_instances]
    def import_with_validations(column_names, array_of_attributes, options = T.unsafe(nil)); end

    # Imports the passed in +column_names+ and +array_of_attributes+
    # given the passed in +options+ Hash. This will return the number
    # of insert operations it took to create these records without
    # validations or callbacks. See ActiveRecord::Base.import for more
    # information on +column_names+, +array_of_attributes_ and
    # +options+.
    def import_without_validations_or_callbacks(column_names, array_of_attributes, options = T.unsafe(nil)); end

    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
    def inheritance_column; end
    def inheritance_column=(value); end
    def inheritance_column?; end
    def internal_metadata_table_name; end
    def internal_metadata_table_name=(value); end
    def internal_metadata_table_name?; end
    def local_stored_attributes; end
    def local_stored_attributes=(_arg0); end
    def lock_optimistically; end
    def lock_optimistically=(value); end
    def lock_optimistically?; end
    def logger; end
    def logger=(value); end
    def logger?; end
    def nested_attributes_options; end
    def nested_attributes_options=(value); end
    def nested_attributes_options?; end
    def partial_inserts; end
    def partial_inserts=(value); end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates=(value); end
    def partial_updates?; end
    def pluralize_table_names; end
    def pluralize_table_names=(value); end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type=(value); end
    def primary_key_prefix_type?; end
    def record_timestamps; end
    def record_timestamps=(value); end
    def record_timestamps?; end
    def schema_migrations_table_name; end
    def schema_migrations_table_name=(value); end
    def schema_migrations_table_name?; end
    def shard_selector; end
    def shard_selector=(value); end
    def shard_selector?; end
    def signed_id_verifier_secret; end
    def signed_id_verifier_secret=(value); end
    def signed_id_verifier_secret?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(value); end
    def skip_time_zone_conversion_for_attributes?; end
    def store_full_class_name; end
    def store_full_class_name=(value); end
    def store_full_class_name?; end
    def store_full_sti_class; end
    def store_full_sti_class=(value); end
    def store_full_sti_class?; end
    def strict_loading_by_default; end
    def strict_loading_by_default=(value); end
    def strict_loading_by_default?; end
    def strict_loading_violation!(owner:, reflection:); end

    # Returns true if the current database connection adapter
    # supports import functionality, otherwise returns false.
    #
    # @return [Boolean]
    def supports_import?(*args); end

    # Returns true if the current database connection adapter
    # supports on duplicate key update functionality, otherwise
    # returns false.
    #
    # @return [Boolean]
    def supports_on_duplicate_key_update?; end

    # returns true if the current database connection adapter
    # supports setting the primary key of bulk imported models, otherwise
    # returns false
    #
    # @return [Boolean]
    def supports_setting_primary_key_of_imported_objects?; end

    # Synchronizes the passed in ActiveRecord instances with data
    # from the database. This is like calling reload on an individual
    # ActiveRecord instance but it is intended for use on multiple instances.
    #
    # This uses one query for all instance updates and then updates existing
    # instances rather sending one query for each instance
    #
    # == Examples
    # # Synchronizing existing models by matching on the primary key field
    # posts = Post.where(author: "Zach").first
    # <.. out of system changes occur to change author name from Zach to Zachary..>
    # Post.synchronize posts
    # posts.first.author # => "Zachary" instead of Zach
    #
    # # Synchronizing using custom key fields
    # posts = Post.where(author: "Zach").first
    # <.. out of system changes occur to change the address of author 'Zach' to 1245 Foo Ln ..>
    # Post.synchronize posts, [:name] # queries on the :name column and not the :id column
    # posts.first.address # => "1245 Foo Ln" instead of whatever it was
    def synchronize(instances, keys = T.unsafe(nil)); end

    def table_name_prefix; end
    def table_name_prefix=(value); end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix=(value); end
    def table_name_suffix?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(value); end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types=(value); end
    def time_zone_aware_types?; end

    private

    def _inheritance_column=(value); end
    def add_special_rails_stamps(column_names, array_of_attributes, options); end

    # We are eventually going to call Class.import <objects> so we build up a hash
    # of class => objects to import.
    def find_associated_objects_for_import(associated_objects_by_class, model); end

    def import_associations(models, options); end

    # Sync belongs_to association ids with foreign key field
    def load_association_ids(model); end

    def set_attributes_and_mark_clean(models, import_result, timestamps, options); end

    # Checks that the imported hash has the required_keys, optionally also checks that the hash has
    # no keys beyond those required when `allow_extra_keys` is false.
    # returns `nil` if validation passes, or an error message if it fails
    def validate_hash_import(hash, required_keys, allow_extra_keys); end

    # Returns an Array of Hashes for the passed in +column_names+ and +array_of_attributes+.
    def validations_array_for_column_names_and_attributes(column_names, array_of_attributes); end

    # Returns SQL the VALUES for an INSERT statement given the passed in +columns+
    # and +array_of_attributes+.
    def values_sql_for_columns_and_attributes(columns, array_of_attributes); end
  end
end

module ActiveRecord::Base::GeneratedAssociationMethods; end
module ActiveRecord::Base::GeneratedAttributeMethods; end
ActiveRecord::Base::OrmAdapter = OrmAdapter::ActiveRecord

module ActiveRecord::ConnectionAdapters
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveSupport::Callbacks
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  include ::ActiveRecord::ConnectionAdapters::Quoting
  include ::ActiveRecord::ConnectionAdapters::DatabaseLimits
  include ::ActiveRecord::ConnectionAdapters::QueryCache
  include ::ActiveRecord::ConnectionAdapters::Savepoints
  include ::ActiveRecord::Import::AbstractAdapter::InstanceMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  def initialize(connection, logger = T.unsafe(nil), config = T.unsafe(nil)); end

  def __callbacks; end
  def __callbacks?; end
  def _checkin_callbacks; end
  def _checkout_callbacks; end
  def _run_checkin_callbacks(&block); end
  def _run_checkout_callbacks(&block); end
  def active?; end
  def adapter_name; end
  def advisory_locks_enabled?; end
  def all_foreign_keys_valid?; end
  def async_enabled?; end
  def build_insert_sql(insert); end
  def case_insensitive_comparison(attribute, value); end
  def case_sensitive_comparison(attribute, value); end
  def check_if_write_query(sql); end
  def check_version; end
  def clear_cache!; end
  def close; end
  def connection_class; end
  def create(*_arg0); end
  def create_enum(*_arg0); end
  def database_version; end
  def default_index_type?(index); end
  def default_uniqueness_comparison(attribute, value); end
  def delete(*_arg0); end
  def disable_extension(name); end
  def disable_referential_integrity; end
  def discard!; end
  def disconnect!; end
  def enable_extension(name); end
  def exec_insert_all(*_arg0); end
  def expire; end
  def extensions; end
  def field_ordered_value(column, values); end
  def get_advisory_lock(lock_id); end
  def get_database_version; end
  def in_use?; end
  def index_algorithms; end
  def insert(*_arg0); end
  def lease; end
  def lock; end
  def logger; end
  def migration_context; end
  def migrations_paths; end
  def owner; end
  def pool; end
  def pool=(_arg0); end
  def prefetch_primary_key?(table_name = T.unsafe(nil)); end
  def prepared_statements; end
  def prepared_statements?; end
  def prepared_statements_disabled_cache; end
  def preventing_writes?; end
  def raw_connection; end
  def reconnect!; end
  def release_advisory_lock(lock_id); end
  def replica?; end
  def requires_reloading?; end
  def reset!; end
  def role; end
  def rollback_db_transaction(*_arg0); end
  def rollback_to_savepoint(*_arg0); end
  def schema_cache; end
  def schema_cache=(cache); end
  def schema_migration; end
  def schema_version; end
  def seconds_idle; end
  def shard; end
  def steal!; end
  def supports_advisory_locks?; end
  def supports_bulk_alter?; end
  def supports_check_constraints?; end
  def supports_comments?; end
  def supports_comments_in_create?; end
  def supports_common_table_expressions?; end
  def supports_concurrent_connections?; end
  def supports_datetime_with_precision?; end
  def supports_ddl_transactions?; end
  def supports_deferrable_constraints?; end
  def supports_explain?; end
  def supports_expression_index?; end
  def supports_extensions?; end
  def supports_foreign_keys?; end
  def supports_foreign_tables?; end
  def supports_index_sort_order?; end
  def supports_indexes_in_create?; end
  def supports_insert_conflict_target?; end
  def supports_insert_on_duplicate_skip?; end
  def supports_insert_on_duplicate_update?; end
  def supports_insert_returning?; end
  def supports_json?; end
  def supports_lazy_transactions?; end
  def supports_materialized_views?; end
  def supports_optimizer_hints?; end
  def supports_partial_index?; end
  def supports_partitioned_indexes?; end
  def supports_savepoints?; end
  def supports_transaction_isolation?; end
  def supports_validate_constraints?; end
  def supports_views?; end
  def supports_virtual_columns?; end
  def throw_away!; end
  def truncate(*_arg0); end
  def truncate_tables(*_arg0); end
  def unprepared_statement; end
  def update(*_arg0); end
  def use_metadata_table?; end
  def valid_type?(type); end
  def verify!; end
  def visitor; end
  def with_instrumenter(instrumenter, &block); end

  private

  def arel_visitor; end
  def build_result(columns:, rows:, column_types: T.unsafe(nil)); end
  def build_statement_pool; end
  def can_perform_case_insensitive_comparison_for?(column); end
  def collector; end
  def column_for(table_name, column_name); end
  def column_for_attribute(attribute); end
  def log(sql, name = T.unsafe(nil), binds = T.unsafe(nil), type_casted_binds = T.unsafe(nil), statement_name = T.unsafe(nil), async: T.unsafe(nil), &block); end
  def transform_query(sql); end
  def translate_exception(exception, message:, sql:, binds:); end
  def translate_exception_class(e, sql, binds); end
  def type_map; end
  def without_prepared_statement?(binds); end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _checkin_callbacks; end
    def _checkin_callbacks=(value); end
    def _checkout_callbacks; end
    def _checkout_callbacks=(value); end
    def build_read_query_regexp(*parts); end
    def database_exists?(config); end
    def quoted_column_names; end
    def quoted_table_names; end
    def type_cast_config_to_boolean(config); end
    def type_cast_config_to_integer(config); end

    private

    def extract_limit(sql_type); end
    def extract_precision(sql_type); end
    def extract_scale(sql_type); end
    def initialize_type_map(m); end
    def register_class_with_limit(mapping, key, klass); end
    def register_class_with_precision(mapping, key, klass); end
  end
end

ActiveRecord::ConnectionAdapters::AbstractAdapter::ADAPTER_NAME = T.let(T.unsafe(nil), String)
ActiveRecord::ConnectionAdapters::AbstractAdapter::COMMENT_REGEX = T.let(T.unsafe(nil), Regexp)
ActiveRecord::ConnectionAdapters::AbstractAdapter::SIMPLE_INT = T.let(T.unsafe(nil), Regexp)
ActiveRecord::ConnectionAdapters::AbstractAdapter::TYPE_MAP = T.let(T.unsafe(nil), ActiveRecord::Type::TypeMap)

class ActiveRecord::ConnectionAdapters::AddColumnDefinition < ::Struct
  def column; end
  def column=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::ChangeColumnDefinition < ::Struct
  def column; end
  def column=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::CheckConstraintDefinition < ::Struct
  def export_name_on_schema_dump?; end
  def expression; end
  def expression=(_); end
  def name; end
  def options; end
  def options=(_); end
  def table_name; end
  def table_name=(_); end
  def validate?; end
  def validated?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::ColumnDefinition < ::Struct
  def aliased_types(name, fallback); end
  def collation; end
  def collation=(value); end
  def comment; end
  def comment=(value); end
  def default; end
  def default=(value); end
  def limit; end
  def limit=(value); end
  def name; end
  def name=(_); end
  def null; end
  def null=(value); end
  def options; end
  def options=(_); end
  def precision; end
  def precision=(value); end
  def primary_key?; end
  def scale; end
  def scale=(value); end
  def sql_type; end
  def sql_type=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::CreateIndexDefinition < ::Struct
  def algorithm; end
  def algorithm=(_); end
  def if_not_exists; end
  def if_not_exists=(_); end
  def index; end
  def index=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::ForeignKeyDefinition < ::Struct
  def column; end
  def custom_primary_key?; end
  def deferrable; end
  def defined_for?(to_table: T.unsafe(nil), validate: T.unsafe(nil), **options); end
  def export_name_on_schema_dump?; end
  def from_table; end
  def from_table=(_); end
  def name; end
  def on_delete; end
  def on_update; end
  def options; end
  def options=(_); end
  def primary_key; end
  def to_table; end
  def to_table=(_); end
  def validate?; end
  def validated?; end

  private

  def default_primary_key; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::PrimaryKeyDefinition < ::Struct
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module ActiveRecord::Encryption::EncryptableRecord::ClassMethods
  def deterministic_encrypted_attributes; end
  def encrypts(*names, key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous: T.unsafe(nil), **context_properties); end
  def source_attribute_from_preserved_attribute(attribute_name); end

  private

  def add_length_validation_for_encrypted_columns; end
  def encrypt_attribute(name, attribute_scheme); end
  def global_previous_schemes_for(scheme); end
  def load_schema!; end
  def override_accessors_to_preserve_original(name, original_attribute_name); end
  def preserve_original_encrypted(name); end
  def scheme_for(key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous: T.unsafe(nil), **context_properties); end
  def validate_column_size(attribute_name); end
end

module ActiveRecord::Import
  class << self
    def base_adapter(adapter); end

    # Loads the import functionality for the passed in ActiveRecord connection
    def load_from_connection_pool(connection_pool); end

    # Loads the import functionality for a specific database adapter
    def require_adapter(adapter); end
  end
end

ActiveRecord::Import::ADAPTER_PATH = T.let(T.unsafe(nil), String)
module ActiveRecord::Import::AbstractAdapter; end

module ActiveRecord::Import::AbstractAdapter::InstanceMethods
  # Synchronizes the passed in ActiveRecord instances with the records in
  # the database by calling +reload+ on each instance.
  def after_import_synchronize(instances); end

  def increment_locking_column!(table_name, results, locking_column); end
  def insert_many(sql, values, _options = T.unsafe(nil), *args); end
  def next_value_for_sequence(sequence_name); end

  # Returns an array of post SQL statements given the passed in options.
  def post_sql_statements(table_name, options); end

  def pre_sql_statements(options); end

  # @return [Boolean]
  def supports_on_duplicate_key_update?; end
end

module ActiveRecord::Import::Connection
  def establish_connection(args = T.unsafe(nil)); end
end

module ActiveRecord::Import::ConnectionAdapters; end

module ActiveRecord::Import::ImportSupport
  # @return [Boolean]
  def supports_import?; end
end

class ActiveRecord::Import::MissingColumnError < ::StandardError
  # @return [MissingColumnError] a new instance of MissingColumnError
  def initialize(name, index); end
end

module ActiveRecord::Import::OnDuplicateKeyUpdateSupport
  # @return [Boolean]
  def supports_on_duplicate_key_update?; end
end

class ActiveRecord::Import::Result < ::Struct
  # Returns the value of attribute failed_instances
  #
  # @return [Object] the current value of failed_instances
  def failed_instances; end

  # Sets the attribute failed_instances
  #
  # @param value [Object] the value to set the attribute failed_instances to.
  # @return [Object] the newly set value
  def failed_instances=(_); end

  # Returns the value of attribute ids
  #
  # @return [Object] the current value of ids
  def ids; end

  # Sets the attribute ids
  #
  # @param value [Object] the value to set the attribute ids to.
  # @return [Object] the newly set value
  def ids=(_); end

  # Returns the value of attribute num_inserts
  #
  # @return [Object] the current value of num_inserts
  def num_inserts; end

  # Sets the attribute num_inserts
  #
  # @param value [Object] the value to set the attribute num_inserts to.
  # @return [Object] the newly set value
  def num_inserts=(_); end

  # Returns the value of attribute results
  #
  # @return [Object] the current value of results
  def results; end

  # Sets the attribute results
  #
  # @param value [Object] the value to set the attribute results to.
  # @return [Object] the newly set value
  def results=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Import::Validator
  # @return [Validator] a new instance of Validator
  def initialize(klass, options = T.unsafe(nil)); end

  def init_validations(klass); end

  # @return [Boolean]
  def valid_model?(model); end
end

class ActiveRecord::Import::ValueSetTooLargeError < ::StandardError
  # @return [ValueSetTooLargeError] a new instance of ValueSetTooLargeError
  def initialize(msg = T.unsafe(nil), size = T.unsafe(nil)); end

  # Returns the value of attribute size.
  def size; end
end

class ActiveRecord::Import::ValueSetsBytesParser
  # @return [ValueSetsBytesParser] a new instance of ValueSetsBytesParser
  def initialize(values, options); end

  # Returns the value of attribute max_bytes.
  def max_bytes; end

  def parse; end

  # Returns the value of attribute reserved_bytes.
  def reserved_bytes; end

  # Returns the value of attribute values.
  def values; end

  private

  def default_max_bytes; end

  class << self
    def parse(values, options); end
  end
end

class ActiveRecord::Import::ValueSetsRecordsParser
  # @return [ValueSetsRecordsParser] a new instance of ValueSetsRecordsParser
  def initialize(values, options); end

  # Returns the value of attribute max_records.
  def max_records; end

  def parse; end

  # Returns the value of attribute values.
  def values; end

  class << self
    def parse(values, options); end
  end
end

class ActiveRecord::MigrationProxy < ::Struct
  def initialize(name, version, filename, scope); end

  def announce(*_arg0, &_arg1); end
  def basename; end
  def disable_ddl_transaction(*_arg0, &_arg1); end
  def filename; end
  def filename=(_); end
  def migrate(*_arg0, &_arg1); end
  def name; end
  def name=(_); end
  def scope; end
  def scope=(_); end
  def version; end
  def version=(_); end
  def write(*_arg0, &_arg1); end

  private

  def load_migration; end
  def migration; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

ActiveRecord::UnknownAttributeError = ActiveModel::UnknownAttributeError
