# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/boxing/all/boxing.rbi
#
# boxing-0.7.1

module Boxing
  def config(&block); end
  def dependencies(groups = nil); end
  def self.config(&block); end
  def self.dependencies(groups = nil); end
end
class Boxing::Config
  def assets_precompile; end
  def assets_precompile=(arg0); end
  def build_packages; end
  def build_packages=(arg0); end
  def health_check; end
  def health_check=(arg0); end
  def health_check_path; end
  def health_check_path=(arg0); end
  def ignores; end
  def ignores=(arg0); end
  def initialize(&block); end
  def name; end
  def name=(arg0); end
  def node_version; end
  def node_version=(arg0); end
  def port; end
  def port=(arg0); end
  def registry; end
  def registry=(arg0); end
  def root; end
  def root=(arg0); end
  def runtime_packages; end
  def runtime_packages=(arg0); end
end
class Boxing::Package
  def ==(other); end
  def build?; end
  def eql?(other); end
  def hash; end
  def initialize(name, version = nil, mode: nil); end
  def name; end
  def runtime?; end
  def self.load(path); end
  def to_s; end
  def version; end
end
class Boxing::Database
  def each_package_path_for(name, &block); end
  def git?; end
  def initialize(path = nil); end
  def package_for(name); end
  def path; end
  def self.download!(path = nil); end
  def self.exist?(path = nil); end
  def update!; end
end
class Boxing::Database::DownloadFailed < RuntimeError
end
class Boxing::Database::UpdateFailed < RuntimeError
end
class Boxing::Context
  def config; end
  def default_packages; end
  def extra_packages; end
  def git?; end
  def has?(*names); end
  def initialize(config, database, dependencies = nil); end
  def mode_of(name); end
  def node_version; end
  def packages; end
  def to_binding; end
end
module Boxing::Commands
end
class Boxing::Commands::Base < Thor::Group
  def context; end
  def prepare; end
  def self.source_root; end
  extend Thor::Actions::ClassMethods
  include Thor::Actions
end
class Boxing::Commands::Generate < Boxing::Commands::Base
  def execute; end
end
class Boxing::Command < Thor
  def compose(*args); end
  def generate(*args); end
  def self.exit_on_failure?; end
  def update(*args); end
end
class Boxing::Commands::Compose < Boxing::Commands::Base
  def execute; end
end
class Boxing::Commands::Update < Boxing::Commands::Base
  def execute; end
end
