# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `simplecov-cobertura` gem.
# Please instead update this file by running `bin/tapioca gem simplecov-cobertura`.

# Code coverage for ruby. Please check out README for a full introduction.
module SimpleCov
  extend ::SimpleCov::Configuration

  class << self
    def at_exit_behavior; end

    # Clear out the previously cached .result. Primarily useful in testing
    def clear_result; end

    # Collate a series of SimpleCov result files into a single SimpleCov output.
    #
    # You can optionally specify configuration with a block:
    #   SimpleCov.collate Dir["simplecov-resultset-*/.resultset.json"]
    #    OR
    #   SimpleCov.collate Dir["simplecov-resultset-*/.resultset.json"], 'rails' # using rails profile
    #    OR
    #   SimpleCov.collate Dir["simplecov-resultset-*/.resultset.json"] do
    #     add_filter 'test'
    #   end
    #    OR
    #   SimpleCov.collate Dir["simplecov-resultset-*/.resultset.json"], 'rails' do
    #     add_filter 'test'
    #   end
    #
    # Please check out the RDoc for SimpleCov::Configuration to find about
    # available config options, or checkout the README for more in-depth
    # information about coverage collation
    #
    # By default `collate` ignores the merge_timeout so all results of all files specified will be
    # merged together. If you want to honor the merge_timeout then provide the keyword argument
    # `ignore_timeout: false`.
    def collate(result_filenames, profile = T.unsafe(nil), ignore_timeout: T.unsafe(nil), &block); end

    # Thinking: Move this behavior earlier so if there was an error we do nothing?
    #
    # @api private
    def exit_and_report_previous_error(exit_status); end

    # Returns the exit status from the exit exception
    #
    # @api private
    def exit_status_from_exception; end

    # Basically, should we take care of at_exit behavior or something else?
    # Used by the minitest plugin. See lib/minitest/simplecov_plugin.rb
    def external_at_exit; end

    # Basically, should we take care of at_exit behavior or something else?
    # Used by the minitest plugin. See lib/minitest/simplecov_plugin.rb
    def external_at_exit=(_arg0); end

    # Basically, should we take care of at_exit behavior or something else?
    # Used by the minitest plugin. See lib/minitest/simplecov_plugin.rb
    def external_at_exit?; end

    # Applies the configured filters to the given array of SimpleCov::SourceFile items
    def filtered(files); end

    # @api private
    # @return [Boolean]
    def final_result_process?; end

    # Applies the configured groups to the given array of SimpleCov::SourceFile items
    def grouped(files); end

    def load_adapter(name); end

    # Applies the profile of given name on SimpleCov configuration
    def load_profile(name); end

    # Returns the value of attribute pid.
    def pid; end

    # Sets the attribute pid
    #
    # @param value the value to set the attribute pid to.
    def pid=(_arg0); end

    # @api private
    # @return [Boolean]
    def previous_error?(error_exit_status); end

    # Usage:
    #   exit_status = SimpleCov.process_result(SimpleCov.result, exit_status)
    #
    # @api private
    def process_result(result); end

    def process_results_and_report_error; end

    # @api private
    # @return [Boolean]
    def ready_to_process_results?; end

    # Returns the result for the current coverage run, merging it across test suites
    # from cache using SimpleCov::ResultMerger if use_merging is activated (default)
    def result; end

    # Returns nil if the result has not been computed
    # Otherwise, returns the result
    #
    # @return [Boolean]
    def result?; end

    def result_exit_status(result); end

    # Rounding down to be extra strict, see #679
    #
    # @api private
    def round_coverage(coverage); end

    # Called from at_exit block
    #
    # @api private
    def run_exit_tasks!; end

    # Returns the value of attribute running.
    def running; end

    # Sets the attribute running
    #
    # @param value the value to set the attribute running to.
    def running=(_arg0); end

    # Sets up SimpleCov to run against your project.
    # You can optionally specify a profile to use as well as configuration with a block:
    #   SimpleCov.start
    #    OR
    #   SimpleCov.start 'rails' # using rails profile
    #    OR
    #   SimpleCov.start do
    #     add_filter 'test'
    #   end
    #     OR
    #   SimpleCov.start 'rails' do
    #     add_filter 'test'
    #   end
    #
    # Please check out the RDoc for SimpleCov::Configuration to find about available config options
    def start(profile = T.unsafe(nil), &block); end

    # @api private
    def wait_for_other_processes; end

    # @api private
    def write_last_run(result); end

    private

    # Unite the result so it wouldn't matter what coverage type was called
    #
    # @return [Hash]
    def adapt_coverage_result; end

    # Finds files that were to be tracked but were not loaded and initializes
    # the line-by-line coverage to zero (if relevant) or nil (comments / whitespace etc).
    def add_not_loaded_files(result); end

    def initial_setup(profile, &block); end
    def lookup_corresponding_ruby_coverage_name(criterion); end

    # parallel_tests isn't always available, see: https://github.com/grosser/parallel_tests/issues/772
    def make_parallel_tests_available; end

    # @return [Boolean]
    def probably_running_parallel_tests?; end

    # Call steps that handle process coverage result
    #
    # @return [Hash]
    def process_coverage_result; end

    # Filter coverage result
    # The result before filter also has result of coverage for files
    # are not related to the project like loaded gems coverage.
    #
    # @return [Hash]
    def remove_useless_results; end

    # Initialize result with files that are not included by coverage
    # and added inside the config block
    #
    # @return [Hash]
    def result_with_not_loaded_files; end

    # Trigger Coverage.start depends on given config coverage_criterion
    #
    # With Positive branch it supports all coverage measurement types
    # With Negative branch it supports only line coverage measurement type
    def start_coverage_measurement; end

    def start_coverage_with_criteria; end
  end
end

# TODO: Documentation on how to build your own formatters
module SimpleCov::Formatter
  class << self
    def from_env(env); end
  end
end

class SimpleCov::Formatter::CoberturaFormatter
  # @return [CoberturaFormatter] a new instance of CoberturaFormatter
  def initialize(result_file_name: T.unsafe(nil)); end

  def format(result); end

  private

  def coverage_output(result); end
  def extract_rate(percent); end
  def project_root; end
  def resolve_filename(filename); end
  def result_to_xml(result); end
  def set_branch_attributes(line, file_line, branched_lines, branched_lines_covered); end
  def set_class_attributes(class_, file); end
  def set_coverage_attributes(coverage, result); end
  def set_line_attributes(line, file_line); end
  def set_package_attributes(package, name, result); end
  def set_xml_head(lines = T.unsafe(nil)); end
end

SimpleCov::Formatter::CoberturaFormatter::DTD_URL = T.let(T.unsafe(nil), String)
SimpleCov::Formatter::CoberturaFormatter::RESULT_FILE_NAME = T.let(T.unsafe(nil), String)
SimpleCov::Formatter::CoberturaFormatter::VERSION = T.let(T.unsafe(nil), String)
SimpleCov::VERSION = T.let(T.unsafe(nil), String)
