# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord-import` gem.
# Please instead update this file by running `bin/tapioca gem activerecord-import`.

# source://activerecord-import//lib/activerecord-import/active_record/adapters/abstract_adapter.rb#5
module ActiveRecord
  class << self
    # source://activerecord/7.0.4/lib/active_record.rb#277
    def action_on_strict_loading_violation; end

    # source://activerecord/7.0.4/lib/active_record.rb#277
    def action_on_strict_loading_violation=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#270
    def application_record_class; end

    # source://activerecord/7.0.4/lib/active_record.rb#270
    def application_record_class=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#213
    def async_query_executor; end

    # source://activerecord/7.0.4/lib/active_record.rb#213
    def async_query_executor=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#183
    def default_timezone; end

    # source://activerecord/7.0.4/lib/active_record.rb#187
    def default_timezone=(default_timezone); end

    # source://activerecord/7.0.4/lib/active_record.rb#311
    def dump_schema_after_migration; end

    # source://activerecord/7.0.4/lib/active_record.rb#311
    def dump_schema_after_migration=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#321
    def dump_schemas; end

    # source://activerecord/7.0.4/lib/active_record.rb#321
    def dump_schemas=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#357
    def eager_load!; end

    # source://activerecord/7.0.4/lib/active_record.rb#296
    def error_on_ignored_order; end

    # source://activerecord/7.0.4/lib/active_record.rb#296
    def error_on_ignored_order=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord/7.0.4/lib/active_record.rb#236
    def global_executor_concurrency; end

    # source://activerecord/7.0.4/lib/active_record.rb#228
    def global_executor_concurrency=(global_executor_concurrency); end

    # source://activerecord/7.0.4/lib/active_record.rb#216
    def global_thread_pool_async_query_executor; end

    # source://activerecord/7.0.4/lib/active_record.rb#240
    def index_nested_attribute_errors; end

    # source://activerecord/7.0.4/lib/active_record.rb#240
    def index_nested_attribute_errors=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#171
    def lazily_load_schema_cache; end

    # source://activerecord/7.0.4/lib/active_record.rb#171
    def lazily_load_schema_cache=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#180
    def legacy_connection_handling; end

    # source://activerecord/7.0.4/lib/active_record.rb#180
    def legacy_connection_handling=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#258
    def maintain_test_schema; end

    # source://activerecord/7.0.4/lib/active_record.rb#258
    def maintain_test_schema=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#340
    def query_transformers; end

    # source://activerecord/7.0.4/lib/active_record.rb#340
    def query_transformers=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#255
    def queues; end

    # source://activerecord/7.0.4/lib/active_record.rb#255
    def queues=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#200
    def reading_role; end

    # source://activerecord/7.0.4/lib/active_record.rb#200
    def reading_role=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#177
    def schema_cache_ignored_tables; end

    # source://activerecord/7.0.4/lib/active_record.rb#177
    def schema_cache_ignored_tables=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#288
    def schema_format; end

    # source://activerecord/7.0.4/lib/active_record.rb#288
    def schema_format=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#328
    def suppress_multiple_database_warning; end

    # source://activerecord/7.0.4/lib/active_record.rb#328
    def suppress_multiple_database_warning=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#302
    def timestamped_migrations; end

    # source://activerecord/7.0.4/lib/active_record.rb#302
    def timestamped_migrations=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#347
    def use_yaml_unsafe_load; end

    # source://activerecord/7.0.4/lib/active_record.rb#347
    def use_yaml_unsafe_load=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#248
    def verbose_query_logs; end

    # source://activerecord/7.0.4/lib/active_record.rb#248
    def verbose_query_logs=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#337
    def verify_foreign_keys_for_fixtures; end

    # source://activerecord/7.0.4/lib/active_record.rb#337
    def verify_foreign_keys_for_fixtures=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/version.rb#7
    def version; end

    # source://activerecord/7.0.4/lib/active_record.rb#267
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/7.0.4/lib/active_record.rb#267
    def warn_on_records_fetched_greater_than=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#197
    def writing_role; end

    # source://activerecord/7.0.4/lib/active_record.rb#197
    def writing_role=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#354
    def yaml_column_permitted_classes; end

    # source://activerecord/7.0.4/lib/active_record.rb#354
    def yaml_column_permitted_classes=(_arg0); end
  end
end

# source://activerecord-import//lib/activerecord-import/import.rb#129
class ActiveRecord::Associations::CollectionAssociation < ::ActiveRecord::Associations::Association
  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#271
  def add_to_target(record, skip_callbacks: T.unsafe(nil), replace: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#109
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord-import//lib/activerecord-import/import.rb#130
  def bulk_import(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#119
  def concat(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#178
  def delete(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#142
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#187
  def destroy(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#164
  def destroy_all; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#224
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#86
  def find(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#298
  def find_from_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#49
  def ids_reader; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#60
  def ids_writer(ids); end

  # source://activerecord-import//lib/activerecord-import/import.rb#130
  def import(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#250
  def include?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#262
  def load_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#294
  def null_scope?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#32
  def reader; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#234
  def replace(other_array); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#79
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#288
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#201
  def size; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#275
  def target=(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#44
  def writer(records); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#340
  def _create_record(attributes, raise = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#478
  def callback(method, record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#484
  def callbacks_for(callback_name); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#424
  def concat_records(records, raise = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#371
  def delete_or_destroy(records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#400
  def delete_records(records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#507
  def find_by_scan(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#493
  def include_in_memory?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#363
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#321
  def merge_target_lists(persisted, memory); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#385
  def remove_records(existing_records, records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#416
  def replace_common_records_in_memory(new_target, original_target); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#443
  def replace_on_target(record, skip_callbacks, replace:, inversing: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#404
  def replace_records(new_target, original_target); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#307
  def transaction(&block); end
end

# source://activerecord-import//lib/activerecord-import/import.rb#122
class ActiveRecord::Associations::CollectionProxy < ::ActiveRecord::Relation
  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#30
  def initialize(klass, association, **_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def <<(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#962
  def ==(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def _select!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def and(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def and!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def append(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def arel(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#316
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord-import//lib/activerecord-import/import.rb#123
  def bulk_import(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#722
  def calculate(operation, column_name); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1048
  def clear; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def concat(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def construct_join_dependency(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#347
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#363
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with_value(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#618
  def delete(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#472
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#690
  def destroy(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#499
  def destroy_all; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct_value(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#829
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def except(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def excluding(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def excluding!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extensions(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extract_associated(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#136
  def find(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from_clause(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from_clause=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having_clause(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having_clause=(arg); end

  # source://activerecord-import//lib/activerecord-import/import.rb#123
  def import(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def in_order_of(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#925
  def include?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert_all(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert_all!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1100
  def inspect; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def invert_where(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def invert_where!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#257
  def last(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_joins(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit_value(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def load_async(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#42
  def load_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#51
  def loaded; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#51
  def loaded?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock_value(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def merge(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def merge!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#316
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def none(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def none!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset_value(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def only(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def or(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def or!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#726
  def pluck(*column_names); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1038
  def prepend(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#929
  def proxy_association; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def push(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly_value(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1006
  def records; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1067
  def reload; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reorder(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reorder!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reordering_value(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reordering_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#389
  def replace(other_array); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reselect(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reselect!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1088
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1094
  def reset_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order_value(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def rewhere(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#934
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def scoping(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def select_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def select_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#780
  def size; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_preloading!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_query_cache!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_query_cache_value(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_query_cache_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def spawn(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading_value(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def structurally_compatible?(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#287
  def take(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#38
  def target; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def uniq!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope_values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def upsert(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def upsert_all(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def values(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where!(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where_clause(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where_clause=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def without(*_arg0, &_arg1); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1135
  def exec_queries; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1131
  def find_from_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1122
  def find_nth_from_last(index); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1117
  def find_nth_with_limit(index, limit); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1127
  def null_scope?; end
end

# source://activerecord-import//lib/activerecord-import/import.rb#258
class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  extend ::ActiveRecord::Import::Connection

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _before_commit_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _commit_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _create_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _destroy_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _find_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _initialize_callbacks; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _rollback_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_commit_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_create_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_destroy_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_find_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_initialize_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_rollback_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_save_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_touch_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_update_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_validation_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _save_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _touch_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _update_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _validate_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _validation_callbacks; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#52
  def _validators; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#52
  def _validators?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
  def attribute_aliases; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
  def attribute_aliases?; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
  def attribute_method_matchers; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
  def attribute_method_matchers?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
  def automatic_scope_inversing; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
  def automatic_scope_inversing?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#171
  def column_for_attribute(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#74
  def default_connection_handler; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#74
  def default_connection_handler?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#76
  def default_role; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#76
  def default_role?; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
  def default_scope_override; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
  def default_scopes; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#78
  def default_shard; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#78
  def default_shard?; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#116
  def defined_enums; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#116
  def defined_enums?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#26
  def destroy_association_async_job; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes?; end

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#20
  def logger; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#20
  def logger?; end

  # source://activemodel/7.0.4/lib/active_model/naming.rb#244
  def model_name(*_arg0, &_arg1); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
  def pluralize_table_names; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
  def pluralize_table_names?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type?; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
  def store_full_class_name; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
  def store_full_class_name?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
  def store_full_sti_class; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
  def store_full_sti_class?; end

  # See ActiveRecord::ConnectionAdapters::AbstractAdapter.synchronize
  #
  # source://activerecord-import//lib/activerecord-import/synchronize.rb#64
  def synchronize(instances, key = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
  def table_name_prefix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
  def table_name_prefix?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
  def table_name_suffix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
  def table_name_suffix?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#171
  def type_for_attribute(*_arg0, &_arg1); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#48
  def validation_context; end

  private

  # source://activemodel/7.0.4/lib/active_model/validations.rb#48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly; end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly=(value); end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _before_commit_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _before_commit_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _commit_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _commit_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _create_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _create_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _destroy_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _destroy_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _find_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _find_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _initialize_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _initialize_callbacks=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _rollback_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _rollback_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _save_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _save_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _touch_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _touch_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _update_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _update_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _validate_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _validate_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _validation_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _validation_callbacks=(value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators=(value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#82
    def application_record_class?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#129
    def asynchronous_queries_session; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#133
    def asynchronous_queries_tracker; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases=(value); end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases?; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers=(value); end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers?; end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads=(value); end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads?; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default?; end

    # Imports a collection of values to the database.
    #
    # This is more efficient than using ActiveRecord::Base#create or
    # ActiveRecord::Base#save multiple times. This method works well if
    # you want to create more than one record at a time and do not care
    # about having ActiveRecord objects returned for each record
    # inserted.
    #
    # This can be used with or without validations. It does not utilize
    # the ActiveRecord::Callbacks during creation/modification while
    # performing the import.
    #
    # == Usage
    #  Model.import array_of_models
    #  Model.import column_names, array_of_models
    #  Model.import array_of_hash_objects
    #  Model.import column_names, array_of_hash_objects
    #  Model.import column_names, array_of_values
    #  Model.import column_names, array_of_values, options
    #
    # ==== Model.import array_of_models
    #
    # With this form you can call _import_ passing in an array of model
    # objects that you want updated.
    #
    # ==== Model.import column_names, array_of_values
    #
    # The first parameter +column_names+ is an array of symbols or
    # strings which specify the columns that you want to update.
    #
    # The second parameter, +array_of_values+, is an array of
    # arrays. Each subarray is a single set of values for a new
    # record. The order of values in each subarray should match up to
    # the order of the +column_names+.
    #
    # ==== Model.import column_names, array_of_values, options
    #
    # The first two parameters are the same as the above form. The third
    # parameter, +options+, is a hash. This is optional. Please see
    # below for what +options+ are available.
    #
    # == Options
    # * +validate+ - true|false, tells import whether or not to use
    #   ActiveRecord validations. Validations are enforced by default.
    #   It skips the uniqueness validation for performance reasons.
    #   You can find more details here:
    #   https://github.com/zdennis/activerecord-import/issues/228
    # * +ignore+ - true|false, an alias for on_duplicate_key_ignore.
    # * +on_duplicate_key_ignore+ - true|false, tells import to discard
    #   records that contain duplicate keys. For Postgres 9.5+ it adds
    #   ON CONFLICT DO NOTHING, for MySQL it uses INSERT IGNORE, and for
    #   SQLite it uses INSERT OR IGNORE. Cannot be enabled on a
    #   recursive import. For database adapters that normally support
    #   setting primary keys on imported objects, this option prevents
    #   that from occurring.
    # * +on_duplicate_key_update+ - :all, an Array, or Hash, tells import to
    #   use MySQL's ON DUPLICATE KEY UPDATE or Postgres/SQLite ON CONFLICT
    #   DO UPDATE ability. See On Duplicate Key Update below.
    # * +synchronize+ - an array of ActiveRecord instances for the model
    #   that you are currently importing data into. This synchronizes
    #   existing model instances in memory with updates from the import.
    # * +timestamps+ - true|false, tells import to not add timestamps
    #   (if false) even if record timestamps is disabled in ActiveRecord::Base
    # * +recursive+ - true|false, tells import to import all has_many/has_one
    #   associations if the adapter supports setting the primary keys of the
    #   newly imported objects. PostgreSQL only.
    # * +batch_size+ - an integer value to specify the max number of records to
    #   include per insert. Defaults to the total number of records to import.
    #
    # == Examples
    #  class BlogPost < ActiveRecord::Base ; end
    #
    #  # Example using array of model objects
    #  posts = [ BlogPost.new author_name: 'Zach Dennis', title: 'AREXT',
    #            BlogPost.new author_name: 'Zach Dennis', title: 'AREXT2',
    #            BlogPost.new author_name: 'Zach Dennis', title: 'AREXT3' ]
    #  BlogPost.import posts
    #
    #  # Example using array_of_hash_objects
    #  # NOTE: column_names will be determined by using the keys of the first hash in the array. If later hashes in the
    #  # array have different keys an exception will be raised. If you have hashes to import with different sets of keys
    #  # we recommend grouping these into batches before importing.
    #  values = [ {author_name: 'zdennis', title: 'test post'} ], [ {author_name: 'jdoe', title: 'another test post'} ] ]
    #  BlogPost.import values
    #
    #  # Example using column_names and array_of_hash_objects
    #  columns = [ :author_name, :title ]
    #  values = [ {author_name: 'zdennis', title: 'test post'} ], [ {author_name: 'jdoe', title: 'another test post'} ] ]
    #  BlogPost.import columns, values
    #
    #  # Example using column_names and array_of_values
    #  columns = [ :author_name, :title ]
    #  values = [ [ 'zdennis', 'test post' ], [ 'jdoe', 'another test post' ] ]
    #  BlogPost.import columns, values
    #
    #  # Example using column_names, array_of_value and options
    #  columns = [ :author_name, :title ]
    #  values = [ [ 'zdennis', 'test post' ], [ 'jdoe', 'another test post' ] ]
    #  BlogPost.import( columns, values, validate: false  )
    #
    #  # Example synchronizing existing instances in memory
    #  post = BlogPost.where(author_name: 'zdennis').first
    #  puts post.author_name # => 'zdennis'
    #  columns = [ :author_name, :title ]
    #  values = [ [ 'yoda', 'test post' ] ]
    #  BlogPost.import posts, synchronize: [ post ]
    #  puts post.author_name # => 'yoda'
    #
    #  # Example synchronizing unsaved/new instances in memory by using a uniqued imported field
    #  posts = [BlogPost.new(title: "Foo"), BlogPost.new(title: "Bar")]
    #  BlogPost.import posts, synchronize: posts, synchronize_keys: [:title]
    #  puts posts.first.persisted? # => true
    #
    # == On Duplicate Key Update (MySQL)
    #
    # The :on_duplicate_key_update option can be either :all, an Array, or a Hash.
    #
    # ==== Using :all
    #
    # The :on_duplicate_key_update option can be set to :all. All columns
    # other than the primary key are updated. If a list of column names is
    # supplied, only those columns will be updated. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: :all
    #
    # ==== Using an Array
    #
    # The :on_duplicate_key_update option can be an array of column
    # names. The column names are the only fields that are updated if
    # a duplicate record is found. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: [ :date_modified, :content, :author ]
    #
    # ====  Using A Hash
    #
    # The :on_duplicate_key_update option can be a hash of column names
    # to model attribute name mappings. This gives you finer grained
    # control over what fields are updated with what attributes on your
    # model. Below is an example:
    #
    #   BlogPost.import columns, attributes, on_duplicate_key_update: { title: :title }
    #
    # == On Duplicate Key Update (Postgres 9.5+ and SQLite 3.24+)
    #
    # The :on_duplicate_key_update option can be :all, an Array, or a Hash with up to
    # three attributes, :conflict_target (and optionally :index_predicate) or
    # :constraint_name (Postgres), and :columns.
    #
    # ==== Using :all
    #
    # The :on_duplicate_key_update option can be set to :all. All columns
    # other than the primary key are updated. If a list of column names is
    # supplied, only those columns will be updated. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: :all
    #
    # ==== Using an Array
    #
    # The :on_duplicate_key_update option can be an array of column
    # names. This option only handles inserts that conflict with the
    # primary key. If a table does not have a primary key, this will
    # not work. The column names are the only fields that are updated
    # if a duplicate record is found. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: [ :date_modified, :content, :author ]
    #
    # ====  Using a Hash
    #
    # The :on_duplicate_key_update option can be a hash with up to three
    # attributes, :conflict_target (and optionally :index_predicate) or
    # :constraint_name, and :columns. Unlike MySQL, Postgres requires the
    # conflicting constraint to be explicitly specified. Using this option
    # allows you to specify a constraint other than the primary key.
    #
    # ===== :conflict_target
    #
    # The :conflict_target attribute specifies the columns that make up the
    # conflicting unique constraint and can be a single column or an array of
    # column names. This attribute is ignored if :constraint_name is included,
    # but it is the preferred method of identifying a constraint. It will
    # default to the primary key. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { conflict_target: [ :author_id, :slug ], columns: [ :date_modified ] }
    #
    # ===== :index_predicate
    #
    # The :index_predicate attribute optionally specifies a WHERE condition
    # on :conflict_target, which is required for matching against partial
    # indexes. This attribute is ignored if :constraint_name is included.
    # Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { conflict_target: [ :author_id, :slug ], index_predicate: 'status <> 0', columns: [ :date_modified ] }
    #
    # ===== :constraint_name
    #
    # The :constraint_name attribute explicitly identifies the conflicting
    # unique index by name. Postgres documentation discourages using this method
    # of identifying an index unless absolutely necessary. Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { constraint_name: :blog_posts_pkey, columns: [ :date_modified ] }
    #
    # ===== :condition
    #
    # The :condition attribute optionally specifies a WHERE condition
    # on :conflict_action. Only rows for which this expression returns true will be updated.
    # Note that it's evaluated last, after a conflict has been identified as a candidate to update.
    # Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { conflict_target: [ :author_id ], condition: "blog_posts.title NOT LIKE '%sample%'", columns: [ :author_name ] }
    #
    # ===== :columns
    #
    # The :columns attribute can be either :all, an Array, or a Hash.
    #
    # ===== Using :all
    #
    # The :columns attribute can be :all. All columns other than the primary key will be updated.
    # If a list of column names is supplied, only those columns will be updated.
    # Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { conflict_target: :slug, columns: :all }
    #
    # ===== Using an Array
    #
    # The :columns attribute can be an array of column names. The column names
    # are the only fields that are updated if a duplicate record is found.
    # Below is an example:
    #
    #   BlogPost.import columns, values, on_duplicate_key_update: { conflict_target: :slug, columns: [ :date_modified, :content, :author ] }
    #
    # =====  Using a Hash
    #
    # The :columns option can be a hash of column names to model attribute name
    # mappings. This gives you finer grained control over what fields are updated
    # with what attributes on your model. Below is an example:
    #
    #   BlogPost.import columns, attributes, on_duplicate_key_update: { conflict_target: :slug, columns: { title: :title } }
    #
    # = Returns
    # This returns an object which responds to +failed_instances+ and +num_inserts+.
    # * failed_instances - an array of objects that fails validation and were not committed to the database. An empty array if no validation is performed.
    # * num_inserts - the number of insert statements it took to import the data
    # * ids - the primary keys of the imported ids if the adapter supports it, otherwise an empty array.
    # * results - import results if the adapter supports it, otherwise an empty array.
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#526
    def bulk_import(*args); end

    # Imports a collection of values if all values are valid. Import fails at the
    # first encountered validation error and raises ActiveRecord::RecordInvalid
    # with the failed instance.
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#542
    def bulk_import!(*args); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#56
    def configurations; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#50
    def configurations=(config); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#201
    def connected_to_stack; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#215
    def connection_class; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#211
    def connection_class=(b); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#219
    def connection_class?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#223
    def connection_class_for_self; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#94
    def connection_handler; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#98
    def connection_handler=(handler); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#102
    def connection_handlers; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#111
    def connection_handlers=(handlers); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#188
    def current_preventing_writes; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#147
    def current_role; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#169
    def current_shard; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role?; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
    def default_scope_override; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
    def default_scope_override=(value); end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
    def default_scopes; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
    def default_scopes=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard?; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums=(value); end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#26
    def destroy_association_async_job; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#26
    def destroy_association_async_job=(value); end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes; end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column?; end

    # source://activerecord-import//lib/activerecord-import/import.rb#526
    def import(*args); end

    # source://activerecord-import//lib/activerecord-import/import.rb#542
    def import!(*args); end

    # source://activerecord-import//lib/activerecord-import/import.rb#551
    def import_helper(*args); end

    # Imports the passed in +column_names+ and +array_of_attributes+
    # given the passed in +options+ Hash with validations. Returns an
    # object with the methods +failed_instances+ and +num_inserts+.
    # +failed_instances+ is an array of instances that failed validations.
    # +num_inserts+ is the number of inserts it took to import the data. See
    # ActiveRecord::Base.import for more information on
    # +column_names+, +array_of_attributes+ and +options+.
    #
    # @yield [failed_instances]
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#755
    def import_with_validations(column_names, array_of_attributes, options = T.unsafe(nil)); end

    # Imports the passed in +column_names+ and +array_of_attributes+
    # given the passed in +options+ Hash. This will return the number
    # of insert operations it took to create these records without
    # validations or callbacks. See ActiveRecord::Base.import for more
    # information on +column_names+, +array_of_attributes_ and
    # +options+.
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#774
    def import_without_validations_or_callbacks(column_names, array_of_attributes, options = T.unsafe(nil)); end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def inheritance_column; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#311
    def inheritance_column=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def inheritance_column?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name?; end

    # source://activerecord/7.0.4/lib/active_record/store.rb#99
    def local_stored_attributes; end

    # source://activerecord/7.0.4/lib/active_record/store.rb#99
    def local_stored_attributes=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger?; end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type?; end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector?; end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(value); end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name?; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class=(value); end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#238
    def strict_loading_violation!(owner:, reflection:); end

    # Returns true if the current database connection adapter
    # supports import functionality, otherwise returns false.
    #
    # @return [Boolean]
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#264
    def supports_import?(*args); end

    # Returns true if the current database connection adapter
    # supports on duplicate key update functionality, otherwise
    # returns false.
    #
    # @return [Boolean]
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#271
    def supports_on_duplicate_key_update?; end

    # returns true if the current database connection adapter
    # supports setting the primary key of bulk imported models, otherwise
    # returns false
    #
    # @return [Boolean]
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#278
    def supports_setting_primary_key_of_imported_objects?; end

    # Synchronizes the passed in ActiveRecord instances with data
    # from the database. This is like calling reload on an individual
    # ActiveRecord instance but it is intended for use on multiple instances.
    #
    # This uses one query for all instance updates and then updates existing
    # instances rather sending one query for each instance
    #
    # == Examples
    # # Synchronizing existing models by matching on the primary key field
    # posts = Post.where(author: "Zach").first
    # <.. out of system changes occur to change author name from Zach to Zachary..>
    # Post.synchronize posts
    # posts.first.author # => "Zachary" instead of Zach
    #
    # # Synchronizing using custom key fields
    # posts = Post.where(author: "Zach").first
    # <.. out of system changes occur to change the address of author 'Zach' to 1245 Foo Ln ..>
    # Post.synchronize posts, [:name] # queries on the :name column and not the :id column
    # posts.first.address # => "1245 Foo Ln" instead of whatever it was
    #
    # source://activerecord-import//lib/activerecord-import/synchronize.rb#25
    def synchronize(instances, keys = T.unsafe(nil)); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types?; end

    private

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def _inheritance_column=(value); end

    # source://activerecord-import//lib/activerecord-import/import.rb#1037
    def add_special_rails_stamps(column_names, array_of_attributes, options); end

    # We are eventually going to call Class.import <objects> so we build up a hash
    # of class => objects to import.
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#964
    def find_associated_objects_for_import(associated_objects_by_class, model); end

    # source://activerecord-import//lib/activerecord-import/import.rb#941
    def import_associations(models, options); end

    # Sync belongs_to association ids with foreign key field
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#921
    def load_association_ids(model); end

    # source://activerecord-import//lib/activerecord-import/import.rb#851
    def set_attributes_and_mark_clean(models, import_result, timestamps, options); end

    # Checks that the imported hash has the required_keys, optionally also checks that the hash has
    # no keys beyond those required when `allow_extra_keys` is false.
    # returns `nil` if validation passes, or an error message if it fails
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#1089
    def validate_hash_import(hash, required_keys, allow_extra_keys); end

    # Returns an Array of Hashes for the passed in +column_names+ and +array_of_attributes+.
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#1082
    def validations_array_for_column_names_and_attributes(column_names, array_of_attributes); end

    # Returns SQL the VALUES for an INSERT statement given the passed in +columns+
    # and +array_of_attributes+.
    #
    # source://activerecord-import//lib/activerecord-import/import.rb#1000
    def values_sql_for_columns_and_attributes(columns, array_of_attributes); end
  end
end

# source://orm_adapter/0.5.0/lib/orm_adapter/adapters/active_record.rb#81
ActiveRecord::Base::OrmAdapter = OrmAdapter::ActiveRecord

# source://activerecord-import//lib/activerecord-import/active_record/adapters/abstract_adapter.rb#6
module ActiveRecord::ConnectionAdapters; end

# source://activerecord-import//lib/activerecord-import/active_record/adapters/abstract_adapter.rb#7
class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Import::AbstractAdapter::InstanceMethods

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#82
  def initialize(connection, logger = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _checkin_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _checkout_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_checkin_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_checkout_callbacks(&block); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#523
  def active?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#292
  def adapter_name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#478
  def advisory_locks_enabled?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#514
  def all_foreign_keys_valid?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#461
  def async_enabled?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#638
  def build_insert_sql(insert); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#609
  def case_insensitive_comparison(attribute, value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#605
  def case_sensitive_comparison(attribute, value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#118
  def check_if_write_query(sql); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#653
  def check_version; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#574
  def clear_cache!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#625
  def close; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#223
  def connection_class; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def create(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#475
  def create_enum(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#649
  def database_version; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#629
  def default_index_type?(index); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#601
  def default_uniqueness_comparison(attribute, value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def delete(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#467
  def disable_extension(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#509
  def disable_referential_integrity; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#547
  def discard!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#536
  def disconnect!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#471
  def enable_extension(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def exec_insert_all(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#249
  def expire; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#497
  def extensions; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#664
  def field_ordered_value(column, values); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#486
  def get_advisory_lock(lock_id); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#646
  def get_database_version; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def in_use?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#502
  def index_algorithms; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def insert(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#208
  def lease; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def lock; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def logger; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#153
  def migration_context; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#149
  def migrations_paths; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def owner; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#41
  def pool; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#41
  def pool=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#324
  def prefetch_primary_key?(table_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#175
  def prepared_statements; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#175
  def prepared_statements?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#180
  def prepared_statements_disabled_cache; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#141
  def preventing_writes?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#596
  def raw_connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#529
  def reconnect!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#493
  def release_advisory_lock(lock_id); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#124
  def replica?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#579
  def requires_reloading?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#563
  def reset!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#229
  def role; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def rollback_db_transaction(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def rollback_to_savepoint(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#239
  def schema_cache; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#243
  def schema_cache=(cache); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#157
  def schema_migration; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#660
  def schema_version; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#278
  def seconds_idle; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#235
  def shard; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#265
  def steal!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#317
  def supports_advisory_locks?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#307
  def supports_bulk_alter?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#384
  def supports_check_constraints?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#409
  def supports_comments?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#414
  def supports_comments_in_create?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#433
  def supports_common_table_expressions?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#457
  def supports_concurrent_connections?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#399
  def supports_datetime_with_precision?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#303
  def supports_ddl_transactions?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#379
  def supports_deferrable_constraints?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#348
  def supports_explain?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#343
  def supports_expression_index?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#358
  def supports_extensions?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#369
  def supports_foreign_keys?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#424
  def supports_foreign_tables?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#333
  def supports_index_sort_order?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#364
  def supports_indexes_in_create?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#453
  def supports_insert_conflict_target?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#445
  def supports_insert_on_duplicate_skip?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#449
  def supports_insert_on_duplicate_update?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#441
  def supports_insert_returning?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#404
  def supports_json?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#437
  def supports_lazy_transactions?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#394
  def supports_materialized_views?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#429
  def supports_optimizer_hints?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#338
  def supports_partial_index?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#328
  def supports_partitioned_indexes?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#312
  def supports_savepoints?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#353
  def supports_transaction_isolation?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#374
  def supports_validate_constraints?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#389
  def supports_views?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#419
  def supports_virtual_columns?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#568
  def throw_away!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def truncate(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def truncate_tables(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#283
  def unprepared_statement; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def update(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#128
  def use_metadata_table?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#203
  def valid_type?(type); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#586
  def verify!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def visitor; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#108
  def with_instrumenter(instrumenter, &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#817
  def arel_visitor; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#828
  def build_result(columns:, rows:, column_types: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#821
  def build_statement_pool; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#619
  def can_perform_case_insensitive_comparison_for?(column); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#803
  def collector; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#792
  def column_for(table_name, column_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#798
  def column_for_attribute(attribute); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#755
  def log(sql, name = T.unsafe(nil), binds = T.unsafe(nil), type_casted_binds = T.unsafe(nil), statement_name = T.unsafe(nil), async: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#771
  def transform_query(sql); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#778
  def translate_exception(exception, message:, sql:, binds:); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#745
  def translate_exception_class(e, sql, binds); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#741
  def type_map; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#788
  def without_prepared_statement?(binds); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _checkin_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _checkin_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _checkout_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _checkout_callbacks=(value); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#68
    def build_read_query_regexp(*parts); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#297
    def database_exists?(config); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#74
    def quoted_column_names; end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#78
    def quoted_table_names; end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#57
    def type_cast_config_to_boolean(config); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#47
    def type_cast_config_to_integer(config); end

    private

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#733
    def extract_limit(sql_type); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#729
    def extract_precision(sql_type); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#722
    def extract_scale(sql_type); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#675
    def initialize_type_map(m); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#708
    def register_class_with_limit(mapping, key, klass); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#715
    def register_class_with_precision(mapping, key, klass); end
  end
end

# source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#29
ActiveRecord::ConnectionAdapters::AbstractAdapter::ADAPTER_NAME = T.let(T.unsafe(nil), String)

# source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#39
ActiveRecord::ConnectionAdapters::AbstractAdapter::COMMENT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#38
ActiveRecord::ConnectionAdapters::AbstractAdapter::SIMPLE_INT = T.let(T.unsafe(nil), Regexp)

# source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#738
ActiveRecord::ConnectionAdapters::AbstractAdapter::TYPE_MAP = T.let(T.unsafe(nil), ActiveRecord::Type::TypeMap)

# source://activerecord-import//lib/activerecord-import/base.rb#7
module ActiveRecord::Import
  class << self
    # source://activerecord-import//lib/activerecord-import/base.rb#10
    def base_adapter(adapter); end

    # Loads the import functionality for the passed in ActiveRecord connection
    #
    # source://activerecord-import//lib/activerecord-import/base.rb#31
    def load_from_connection_pool(connection_pool); end

    # Loads the import functionality for a specific database adapter
    #
    # source://activerecord-import//lib/activerecord-import/base.rb#24
    def require_adapter(adapter); end
  end
end

# source://activerecord-import//lib/activerecord-import/base.rb#8
ActiveRecord::Import::ADAPTER_PATH = T.let(T.unsafe(nil), String)

# source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#3
module ActiveRecord::Import::AbstractAdapter; end

# source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#4
module ActiveRecord::Import::AbstractAdapter::InstanceMethods
  # Synchronizes the passed in ActiveRecord instances with the records in
  # the database by calling +reload+ on each instance.
  #
  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#41
  def after_import_synchronize(instances); end

  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#64
  def increment_locking_column!(table_name, results, locking_column); end

  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#9
  def insert_many(sql, values, _options = T.unsafe(nil), *args); end

  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#5
  def next_value_for_sequence(sequence_name); end

  # Returns an array of post SQL statements given the passed in options.
  #
  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#46
  def post_sql_statements(table_name, options); end

  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#24
  def pre_sql_statements(options); end

  # @return [Boolean]
  #
  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#70
  def supports_on_duplicate_key_update?; end
end

# source://activerecord-import//lib/activerecord-import/import.rb#250
module ActiveRecord::Import::Connection
  # source://activerecord-import//lib/activerecord-import/import.rb#251
  def establish_connection(args = T.unsafe(nil)); end
end

# source://activerecord-import//lib/activerecord-import/import.rb#5
module ActiveRecord::Import::ConnectionAdapters; end

# source://activerecord-import//lib/activerecord-import/import.rb#10
module ActiveRecord::Import::ImportSupport
  # @return [Boolean]
  #
  # source://activerecord-import//lib/activerecord-import/import.rb#11
  def supports_import?; end
end

# source://activerecord-import//lib/activerecord-import/import.rb#22
class ActiveRecord::Import::MissingColumnError < ::StandardError
  # @return [MissingColumnError] a new instance of MissingColumnError
  #
  # source://activerecord-import//lib/activerecord-import/import.rb#23
  def initialize(name, index); end
end

# source://activerecord-import//lib/activerecord-import/import.rb#16
module ActiveRecord::Import::OnDuplicateKeyUpdateSupport
  # @return [Boolean]
  #
  # source://activerecord-import//lib/activerecord-import/import.rb#17
  def supports_on_duplicate_key_update?; end
end

# source://activerecord-import//lib/activerecord-import/import.rb#8
class ActiveRecord::Import::Result < ::Struct
  # Returns the value of attribute failed_instances
  #
  # @return [Object] the current value of failed_instances
  def failed_instances; end

  # Sets the attribute failed_instances
  #
  # @param value [Object] the value to set the attribute failed_instances to.
  # @return [Object] the newly set value
  #
  # source://activerecord-import//lib/activerecord-import/import.rb#8
  def failed_instances=(_); end

  # Returns the value of attribute ids
  #
  # @return [Object] the current value of ids
  def ids; end

  # Sets the attribute ids
  #
  # @param value [Object] the value to set the attribute ids to.
  # @return [Object] the newly set value
  #
  # source://activerecord-import//lib/activerecord-import/import.rb#8
  def ids=(_); end

  # Returns the value of attribute num_inserts
  #
  # @return [Object] the current value of num_inserts
  def num_inserts; end

  # Sets the attribute num_inserts
  #
  # @param value [Object] the value to set the attribute num_inserts to.
  # @return [Object] the newly set value
  #
  # source://activerecord-import//lib/activerecord-import/import.rb#8
  def num_inserts=(_); end

  # Returns the value of attribute results
  #
  # @return [Object] the current value of results
  def results; end

  # Sets the attribute results
  #
  # @param value [Object] the value to set the attribute results to.
  # @return [Object] the newly set value
  #
  # source://activerecord-import//lib/activerecord-import/import.rb#8
  def results=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord-import//lib/activerecord-import/import.rb#28
class ActiveRecord::Import::Validator
  # @return [Validator] a new instance of Validator
  #
  # source://activerecord-import//lib/activerecord-import/import.rb#29
  def initialize(klass, options = T.unsafe(nil)); end

  # source://activerecord-import//lib/activerecord-import/import.rb#35
  def init_validations(klass); end

  # @return [Boolean]
  #
  # source://activerecord-import//lib/activerecord-import/import.rb#75
  def valid_model?(model); end
end

# source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#6
class ActiveRecord::Import::ValueSetTooLargeError < ::StandardError
  # @return [ValueSetTooLargeError] a new instance of ValueSetTooLargeError
  #
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#8
  def initialize(msg = T.unsafe(nil), size = T.unsafe(nil)); end

  # Returns the value of attribute size.
  #
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#7
  def size; end
end

# source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#14
class ActiveRecord::Import::ValueSetsBytesParser
  # @return [ValueSetsBytesParser] a new instance of ValueSetsBytesParser
  #
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#21
  def initialize(values, options); end

  # Returns the value of attribute max_bytes.
  #
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#15
  def max_bytes; end

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#27
  def parse; end

  # Returns the value of attribute reserved_bytes.
  #
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#15
  def reserved_bytes; end

  # Returns the value of attribute values.
  #
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#15
  def values; end

  private

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#58
  def default_max_bytes; end

  class << self
    # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#17
    def parse(values, options); end
  end
end

# source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#65
class ActiveRecord::Import::ValueSetsRecordsParser
  # @return [ValueSetsRecordsParser] a new instance of ValueSetsRecordsParser
  #
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#72
  def initialize(values, options); end

  # Returns the value of attribute max_records.
  #
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#66
  def max_records; end

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#77
  def parse; end

  # Returns the value of attribute values.
  #
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#66
  def values; end

  class << self
    # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#68
    def parse(values, options); end
  end
end

# source://activerecord/7.0.4/lib/active_record/errors.rb#347
ActiveRecord::UnknownAttributeError = ActiveModel::UnknownAttributeError
