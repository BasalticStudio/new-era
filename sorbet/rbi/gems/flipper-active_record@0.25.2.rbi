# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `flipper-active_record` gem.
# Please instead update this file by running `bin/tapioca gem flipper-active_record`.

# source://flipper-active_record//lib/flipper/adapters/active_record.rb#5
module Flipper
  # source://forwardable/1.3.2/forwardable.rb#229
  def [](*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def actor(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def actors(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def adapter(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def bool(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def boolean(*args, &block); end

  # source://flipper/0.25.2/lib/flipper.rb#28
  def configuration; end

  # source://flipper/0.25.2/lib/flipper.rb#33
  def configuration=(configuration); end

  # source://flipper/0.25.2/lib/flipper.rb#23
  def configure; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_actor(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_group(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_percentage_of_actors(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_percentage_of_time(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_actor(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_group(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_percentage_of_actors(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_percentage_of_time(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enabled?(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def exist?(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def feature(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def features(*args, &block); end

  # source://flipper/0.25.2/lib/flipper.rb#128
  def group(name); end

  # source://flipper/0.25.2/lib/flipper.rb#115
  def group_exists?(name); end

  # source://flipper/0.25.2/lib/flipper.rb#101
  def group_names; end

  # source://flipper/0.25.2/lib/flipper.rb#94
  def groups; end

  # source://flipper/0.25.2/lib/flipper.rb#133
  def groups_registry; end

  # source://flipper/0.25.2/lib/flipper.rb#138
  def groups_registry=(registry); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def import(*args, &block); end

  # source://flipper/0.25.2/lib/flipper.rb#45
  def instance; end

  # source://flipper/0.25.2/lib/flipper.rb#52
  def instance=(flipper); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def memoize=(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def memoizing?(*args, &block); end

  # source://flipper/0.25.2/lib/flipper.rb#12
  def new(adapter, options = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def percentage_of_actors(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def percentage_of_time(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def preload(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def preload_all(*args, &block); end

  # source://flipper/0.25.2/lib/flipper.rb#85
  def register(name, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def remove(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def sync(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def sync_secret(*args, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def time(*args, &block); end

  # source://flipper/0.25.2/lib/flipper.rb#108
  def unregister_groups; end
end

# source://flipper-active_record//lib/flipper/adapters/active_record.rb#6
module Flipper::Adapters; end

# source://flipper-active_record//lib/flipper/adapters/active_record.rb#7
class Flipper::Adapters::ActiveRecord
  include ::Flipper::Adapter
  extend ::Flipper::Adapter::ClassMethods

  # Public: Initialize a new ActiveRecord adapter instance.
  #
  # name - The Symbol name for this adapter. Optional (default :active_record)
  # feature_class - The AR class responsible for the features table.
  # gate_class - The AR class responsible for the gates table.
  #
  # Allowing the overriding of name is so you can differentiate multiple
  # instances of this adapter from each other, if, for some reason, that is
  # a thing you do.
  #
  # Allowing the overriding of the default feature/gate classes means you
  # can roll your own tables and what not, if you so desire.
  #
  # @return [ActiveRecord] a new instance of ActiveRecord
  #
  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#48
  def initialize(options = T.unsafe(nil)); end

  # Public: Adds a feature to the set of known features.
  #
  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#60
  def add(feature); end

  # Public: Clears the gate values for a feature.
  #
  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#85
  def clear(feature); end

  # Public: Disables a gate for a given thing.
  #
  # feature - The Flipper::Feature for the gate.
  # gate - The Flipper::Gate to disable.
  # thing - The Flipper::Type being disabled for the gate.
  #
  # Returns true.
  #
  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#154
  def disable(feature, gate, thing); end

  # Public: Enables a gate for a given thing.
  #
  # feature - The Flipper::Feature for the gate.
  # gate - The Flipper::Gate to disable.
  # thing - The Flipper::Type being enabled for the gate.
  #
  # Returns true.
  #
  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#132
  def enable(feature, gate, thing); end

  # Public: The set of known features.
  #
  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#55
  def features; end

  # Public: Gets the values for all gates for a given feature.
  #
  # Returns a Hash of Flipper::Gate#key => value.
  #
  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#93
  def get(feature); end

  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#108
  def get_all; end

  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#98
  def get_multi(features); end

  # Public: The name of the adapter.
  #
  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#34
  def name; end

  # Public: Removes a feature from the set of known features.
  #
  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#76
  def remove(feature); end

  # Private
  #
  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#170
  def unsupported_data_type(data_type); end

  private

  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#196
  def enable_multi(feature, gate, thing); end

  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#208
  def result_for_feature(feature, db_gates); end

  # source://flipper-active_record//lib/flipper/adapters/active_record.rb#176
  def set(feature, gate, thing, options = T.unsafe(nil)); end
end

# Private: Do not use outside of this adapter.
#
# source://flipper-active_record//lib/flipper/adapters/active_record.rb#16
class Flipper::Adapters::ActiveRecord::Feature < ::Flipper::Adapters::ActiveRecord::Model
  include ::Flipper::Adapters::ActiveRecord::Feature::GeneratedAttributeMethods
  include ::Flipper::Adapters::ActiveRecord::Feature::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

# source://flipper-active_record//lib/flipper/adapters/active_record.rb#0
module Flipper::Adapters::ActiveRecord::Feature::GeneratedAssociationMethods; end

# source://flipper-active_record//lib/flipper/adapters/active_record.rb#0
module Flipper::Adapters::ActiveRecord::Feature::GeneratedAttributeMethods; end

# Private: Do not use outside of this adapter.
#
# source://flipper-active_record//lib/flipper/adapters/active_record.rb#25
class Flipper::Adapters::ActiveRecord::Gate < ::Flipper::Adapters::ActiveRecord::Model
  include ::Flipper::Adapters::ActiveRecord::Gate::GeneratedAttributeMethods
  include ::Flipper::Adapters::ActiveRecord::Gate::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

# source://flipper-active_record//lib/flipper/adapters/active_record.rb#0
module Flipper::Adapters::ActiveRecord::Gate::GeneratedAssociationMethods; end

# source://flipper-active_record//lib/flipper/adapters/active_record.rb#0
module Flipper::Adapters::ActiveRecord::Gate::GeneratedAttributeMethods; end

# Abstract base class for internal models
#
# source://flipper-active_record//lib/flipper/adapters/active_record.rb#11
class Flipper::Adapters::ActiveRecord::Model < ::ActiveRecord::Base
  include ::Flipper::Adapters::ActiveRecord::Model::GeneratedAttributeMethods
  include ::Flipper::Adapters::ActiveRecord::Model::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

# source://flipper-active_record//lib/flipper/adapters/active_record.rb#0
module Flipper::Adapters::ActiveRecord::Model::GeneratedAssociationMethods; end

# source://flipper-active_record//lib/flipper/adapters/active_record.rb#0
module Flipper::Adapters::ActiveRecord::Model::GeneratedAttributeMethods; end

# source://flipper/0.25.2/lib/flipper.rb#8
Flipper::InstrumentationNamespace = T.let(T.unsafe(nil), Symbol)
