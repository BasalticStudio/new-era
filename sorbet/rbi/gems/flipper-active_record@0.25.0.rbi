# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `flipper-active_record` gem.
# Please instead update this file by running `bin/tapioca gem flipper-active_record`.

# Simple class for turning a flipper_id into an actor that can be based
# to Flipper::Feature#enabled?.
module Flipper
  extend ::Flipper
  extend ::Forwardable

  def [](*args, &block); end
  def actor(*args, &block); end
  def actors(*args, &block); end
  def adapter(*args, &block); end
  def add(*args, &block); end
  def bool(*args, &block); end
  def boolean(*args, &block); end

  # Public: Returns Flipper::Configuration instance.
  def configuration; end

  # Public: Sets Flipper::Configuration instance.
  def configuration=(configuration); end

  # Public: Configure flipper.
  #
  #   Flipper.configure do |config|
  #     config.adapter { ... }
  #   end
  #
  # Yields Flipper::Configuration instance.
  #
  # @yield [configuration]
  def configure; end

  def disable(*args, &block); end
  def disable_actor(*args, &block); end
  def disable_group(*args, &block); end
  def disable_percentage_of_actors(*args, &block); end
  def disable_percentage_of_time(*args, &block); end
  def enable(*args, &block); end
  def enable_actor(*args, &block); end
  def enable_group(*args, &block); end
  def enable_percentage_of_actors(*args, &block); end
  def enable_percentage_of_time(*args, &block); end
  def enabled?(*args, &block); end
  def exist?(*args, &block); end
  def feature(*args, &block); end
  def features(*args, &block); end

  # Public: Fetches a group by name.
  #
  # name - The Symbol name of the group.
  #
  # Examples
  #
  #   Flipper.group(:admins)
  #
  # Returns Flipper::Group.
  def group(name); end

  # Public: Check if a group exists
  #
  # Returns boolean
  #
  # @return [Boolean]
  def group_exists?(name); end

  # Public: Returns a Set of symbols where each symbol is a registered
  # group name. If you just want the names, this is more efficient than doing
  # `Flipper.groups.map(&:name)`.
  def group_names; end

  # Public: Returns a Set of registered Types::Group instances.
  def groups; end

  # Internal: Registry of all groups_registry.
  def groups_registry; end

  # Internal: Change the groups_registry registry.
  def groups_registry=(registry); end

  def import(*args, &block); end

  # Public: Default per thread flipper instance if configured. You should not
  # need to use this directly as most of the Flipper::DSL methods are delegated
  # from Flipper module itself. Instead of doing Flipper.instance.enabled?(:search),
  # you can use Flipper.enabled?(:search) for the same result.
  #
  # Returns Flipper::DSL instance.
  def instance; end

  # Public: Set the flipper instance. It is most common to use the
  # Configuration#default to set this instance, but for things like the test
  # environment, this writer is actually useful.
  def instance=(flipper); end

  def memoize=(*args, &block); end
  def memoizing?(*args, &block); end

  # Public: Start here. Given an adapter returns a handy DSL to all the flipper
  # goodness. To see supported options, check out dsl.rb.
  def new(adapter, options = T.unsafe(nil)); end

  def percentage_of_actors(*args, &block); end
  def percentage_of_time(*args, &block); end
  def preload(*args, &block); end
  def preload_all(*args, &block); end

  # Public: Use this to register a group by name.
  #
  # name - The Symbol name of the group.
  # block - The block that should be used to determine if the group matches a
  #         given thing.
  #
  # Examples
  #
  #   Flipper.register(:admins) { |thing|
  #     thing.respond_to?(:admin?) && thing.admin?
  #   }
  #
  # Returns a Flipper::Group.
  # Raises Flipper::DuplicateGroup if the group is already registered.
  def register(name, &block); end

  def remove(*args, &block); end
  def sync(*args, &block); end
  def sync_secret(*args, &block); end
  def time(*args, &block); end

  # Public: Clears the group registry.
  #
  # Returns nothing.
  def unregister_groups; end
end

module Flipper::Adapters; end

class Flipper::Adapters::ActiveRecord
  include ::Flipper::Adapter
  extend ::Flipper::Adapter::ClassMethods

  # Public: Initialize a new ActiveRecord adapter instance.
  #
  # name - The Symbol name for this adapter. Optional (default :active_record)
  # feature_class - The AR class responsible for the features table.
  # gate_class - The AR class responsible for the gates table.
  #
  # Allowing the overriding of name is so you can differentiate multiple
  # instances of this adapter from each other, if, for some reason, that is
  # a thing you do.
  #
  # Allowing the overriding of the default feature/gate classes means you
  # can roll your own tables and what not, if you so desire.
  #
  # @return [ActiveRecord] a new instance of ActiveRecord
  def initialize(options = T.unsafe(nil)); end

  # Public: Adds a feature to the set of known features.
  def add(feature); end

  # Public: Clears the gate values for a feature.
  def clear(feature); end

  # Public: Disables a gate for a given thing.
  #
  # feature - The Flipper::Feature for the gate.
  # gate - The Flipper::Gate to disable.
  # thing - The Flipper::Type being disabled for the gate.
  #
  # Returns true.
  def disable(feature, gate, thing); end

  # Public: Enables a gate for a given thing.
  #
  # feature - The Flipper::Feature for the gate.
  # gate - The Flipper::Gate to disable.
  # thing - The Flipper::Type being enabled for the gate.
  #
  # Returns true.
  def enable(feature, gate, thing); end

  # Public: The set of known features.
  def features; end

  # Public: Gets the values for all gates for a given feature.
  #
  # Returns a Hash of Flipper::Gate#key => value.
  def get(feature); end

  def get_all; end
  def get_multi(features); end

  # Public: The name of the adapter.
  def name; end

  # Public: Removes a feature from the set of known features.
  def remove(feature); end

  # Private
  def unsupported_data_type(data_type); end

  private

  def enable_multi(feature, gate, thing); end
  def result_for_feature(feature, db_gates); end
  def set(feature, gate, thing, options = T.unsafe(nil)); end
end

# Private: Do not use outside of this adapter.
class Flipper::Adapters::ActiveRecord::Feature < ::Flipper::Adapters::ActiveRecord::Model
  include ::Flipper::Adapters::ActiveRecord::Feature::GeneratedAttributeMethods
  include ::Flipper::Adapters::ActiveRecord::Feature::GeneratedAssociationMethods

  class << self
    def _validators; end
    def defined_enums; end
  end
end

module Flipper::Adapters::ActiveRecord::Feature::GeneratedAssociationMethods; end
module Flipper::Adapters::ActiveRecord::Feature::GeneratedAttributeMethods; end

# Private: Do not use outside of this adapter.
class Flipper::Adapters::ActiveRecord::Gate < ::Flipper::Adapters::ActiveRecord::Model
  include ::Flipper::Adapters::ActiveRecord::Gate::GeneratedAttributeMethods
  include ::Flipper::Adapters::ActiveRecord::Gate::GeneratedAssociationMethods

  class << self
    def _validators; end
    def defined_enums; end
  end
end

module Flipper::Adapters::ActiveRecord::Gate::GeneratedAssociationMethods; end
module Flipper::Adapters::ActiveRecord::Gate::GeneratedAttributeMethods; end

# Abstract base class for internal models
class Flipper::Adapters::ActiveRecord::Model < ::ActiveRecord::Base
  include ::Flipper::Adapters::ActiveRecord::Model::GeneratedAttributeMethods
  include ::Flipper::Adapters::ActiveRecord::Model::GeneratedAssociationMethods

  class << self
    def _validators; end
    def defined_enums; end
  end
end

module Flipper::Adapters::ActiveRecord::Model::GeneratedAssociationMethods; end
module Flipper::Adapters::ActiveRecord::Model::GeneratedAttributeMethods; end

# Private: The namespace for all instrumented events.
Flipper::InstrumentationNamespace = T.let(T.unsafe(nil), Symbol)
