# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `flipper-ui` gem.
# Please instead update this file by running `bin/tapioca gem flipper-ui`.

module Flipper
  extend ::Flipper
  extend ::Forwardable

  def [](*args, &block); end
  def actor(*args, &block); end
  def actors(*args, &block); end
  def adapter(*args, &block); end
  def add(*args, &block); end
  def bool(*args, &block); end
  def boolean(*args, &block); end
  def configuration; end
  def configuration=(configuration); end
  def configure; end
  def disable(*args, &block); end
  def disable_actor(*args, &block); end
  def disable_group(*args, &block); end
  def disable_percentage_of_actors(*args, &block); end
  def disable_percentage_of_time(*args, &block); end
  def enable(*args, &block); end
  def enable_actor(*args, &block); end
  def enable_group(*args, &block); end
  def enable_percentage_of_actors(*args, &block); end
  def enable_percentage_of_time(*args, &block); end
  def enabled?(*args, &block); end
  def exist?(*args, &block); end
  def feature(*args, &block); end
  def features(*args, &block); end
  def group(name); end
  def group_exists?(name); end
  def group_names; end
  def groups; end
  def groups_registry; end
  def groups_registry=(registry); end
  def import(*args, &block); end
  def instance; end
  def instance=(flipper); end
  def memoize=(*args, &block); end
  def memoizing?(*args, &block); end
  def new(adapter, options = T.unsafe(nil)); end
  def percentage_of_actors(*args, &block); end
  def percentage_of_time(*args, &block); end
  def preload(*args, &block); end
  def preload_all(*args, &block); end
  def register(name, &block); end
  def remove(*args, &block); end
  def sync(*args, &block); end
  def sync_secret(*args, &block); end
  def time(*args, &block); end
  def unregister_groups; end
end

Flipper::InstrumentationNamespace = T.let(T.unsafe(nil), Symbol)

module Flipper::UI
  class << self
    # @yield [builder]
    def app(flipper = T.unsafe(nil), options = T.unsafe(nil)); end

    def application_breadcrumb_href; end
    def application_breadcrumb_href=; end
    def configuration; end

    # Public: yields configuration instance for customizing UI text
    #
    # @yield [configuration]
    def configure; end

    def feature_creation_enabled; end
    def feature_creation_enabled=; end
    def feature_removal_enabled; end
    def feature_removal_enabled=; end
    def root; end
  end
end

class Flipper::UI::Action
  extend ::Forwardable

  # @return [Action] a new instance of Action
  def initialize(flipper, request); end

  def bootstrap_css; end
  def bootstrap_js; end

  # Public: Add a breadcrumb to the trail.
  #
  # text - The String text for the breadcrumb.
  # href - The String href for the anchor tag (optional). If nil, breadcrumb
  #        is assumed to be the end of the trail.
  def breadcrumb(text, href = T.unsafe(nil)); end

  def csrf_input_tag; end

  # Public: The instance of the Flipper::DSL the middleware was
  # initialized with.
  def flipper; end

  # Public: Call this with a response to immediately stop the current action
  # and respond however you want.
  #
  # response - The response you would like to return.
  def halt(response); end

  # Public: Set a header.
  #
  # name - The String name of the header.
  # value - The value of the header.
  def header(name, value); end

  def jquery_js; end

  # Public: Dumps an object as json and returns rack response with that as
  # the body. Automatically sets Content-Type to "application/json".
  #
  # object - The Object that should be dumped as json.
  #
  # Returns a response.
  def json_response(object); end

  def params(*args, &block); end
  def popper_js; end

  # Private
  def public_path; end

  # Public: Redirect to a new location.
  #
  # location - The String location to set the Location header to.
  def redirect_to(location); end

  # Public: The Rack::Request to provide a response for.
  def request; end

  # Private: Returns the request method converted to an action method.
  def request_method_name; end

  # Public: Runs the request method for the provided request.
  #
  # Returns whatever the request method returns in the action.
  def run; end

  # Public: Runs another action from within the request method of a
  # different action.
  #
  # action_class - The class of the other action to run.
  #
  # Examples
  #
  #   run_other_action Home
  #   # => result of running Home action
  #
  # Returns result of other action.
  def run_other_action(action_class); end

  # Internal: The path the app is mounted at.
  def script_name; end

  # Public: Set the status code for the response.
  #
  # code - The Integer code you would like the response to return.
  def status(code); end

  # @return [Boolean]
  def valid_request_method?; end

  # Private
  def view(name); end

  # Public: Compiles a view and returns rack response with that as the body.
  #
  # name - The Symbol name of the view.
  #
  # Returns a response.
  def view_response(name); end

  # Private
  def view_with_layout(&block); end

  # Private
  def view_without_layout(name); end

  # Private
  def views_path; end

  class << self
    # Private: The path to the public folder.
    def public_path; end

    # Public: Call this in subclasses so the action knows its route.
    #
    # regex - The Regexp that this action should run for.
    #
    # Returns nothing.
    def route(regex); end

    # Internal: Does this action's route match the path.
    #
    # @return [Boolean]
    def route_match?(path); end

    # Internal: The regex that matches which routes this action will work for.
    def route_regex; end

    # Internal: Initializes and runs an action for a given request.
    #
    # flipper - The Flipper::DSL instance.
    # request - The Rack::Request that was sent.
    #
    # Returns result of Action#run.
    def run(flipper, request); end

    # Private: The path to the views folder.
    def views_path; end
  end
end

class Flipper::UI::Action::Breadcrumb
  # @return [Breadcrumb] a new instance of Breadcrumb
  def initialize(text, href = T.unsafe(nil)); end

  # @return [Boolean]
  def active?; end

  # Returns the value of attribute href.
  def href; end

  # Returns the value of attribute text.
  def text; end
end

Flipper::UI::Action::CONTENT_SECURITY_POLICY = T.let(T.unsafe(nil), String)

module Flipper::UI::Action::FeatureNameFromRoute
  private

  def feature_name; end
end

Flipper::UI::Action::SCRIPT_SRCS = T.let(T.unsafe(nil), Array)
Flipper::UI::Action::SOURCES = T.let(T.unsafe(nil), Hash)
Flipper::UI::Action::STYLE_SRCS = T.let(T.unsafe(nil), Array)
Flipper::UI::Action::VALID_REQUEST_METHOD_NAMES = T.let(T.unsafe(nil), Set)

# Internal: Used to detect the action that should be used in the middleware.
class Flipper::UI::ActionCollection
  # @return [ActionCollection] a new instance of ActionCollection
  def initialize; end

  def action_for_request(request); end
  def add(action_class); end
end

module Flipper::UI::Actions; end

class Flipper::UI::Actions::ActorsGate < ::Flipper::UI::Action
  include ::Flipper::UI::Action::FeatureNameFromRoute

  def get; end
  def post; end
end

class Flipper::UI::Actions::AddFeature < ::Flipper::UI::Action
  def get; end
end

class Flipper::UI::Actions::BooleanGate < ::Flipper::UI::Action
  include ::Flipper::UI::Action::FeatureNameFromRoute

  def post; end
end

class Flipper::UI::Actions::Feature < ::Flipper::UI::Action
  include ::Flipper::UI::Action::FeatureNameFromRoute

  def delete; end
  def get; end
end

class Flipper::UI::Actions::Features < ::Flipper::UI::Action
  def get; end
  def post; end
end

class Flipper::UI::Actions::File < ::Flipper::UI::Action
  def get; end
end

class Flipper::UI::Actions::GroupsGate < ::Flipper::UI::Action
  include ::Flipper::UI::Action::FeatureNameFromRoute

  def get; end
  def post; end
end

class Flipper::UI::Actions::Home < ::Flipper::UI::Action
  def get; end
end

class Flipper::UI::Actions::PercentageOfActorsGate < ::Flipper::UI::Action
  include ::Flipper::UI::Action::FeatureNameFromRoute

  def post; end
end

class Flipper::UI::Actions::PercentageOfTimeGate < ::Flipper::UI::Action
  include ::Flipper::UI::Action::FeatureNameFromRoute

  def post; end
end

class Flipper::UI::Configuration
  # @return [Configuration] a new instance of Configuration
  def initialize; end

  # Public: What should be used to denote you are trying to add multiple
  # actors at once (instead of just a single actor).
  # Default is comma ",".
  def actors_separator; end

  # Public: What should be used to denote you are trying to add multiple
  # actors at once (instead of just a single actor).
  # Default is comma ",".
  def actors_separator=(_arg0); end

  # Public: What should show up in the form to add actors. This can be
  # different per application since flipper_id's can be whatever an
  # application needs. Defaults to "a flipper id".
  def add_actor_placeholder; end

  # Public: What should show up in the form to add actors. This can be
  # different per application since flipper_id's can be whatever an
  # application needs. Defaults to "a flipper id".
  def add_actor_placeholder=(_arg0); end

  # Public: If you set this, the UI will always have a first breadcrumb that
  # says "App" which points to this href. The href can be a path (ie: "/")
  # or full url ("https://app.example.com/").
  def application_breadcrumb_href; end

  # Public: If you set this, the UI will always have a first breadcrumb that
  # says "App" which points to this href. The href can be a path (ie: "/")
  # or full url ("https://app.example.com/").
  def application_breadcrumb_href=(_arg0); end

  # Returns the value of attribute banner_class.
  def banner_class; end

  # Sets the attribute banner_class
  #
  # @param value the value to set the attribute banner_class to.
  def banner_class=(value); end

  # Returns the value of attribute banner_text.
  def banner_text; end

  # Sets the attribute banner_text
  #
  # @param value the value to set the attribute banner_text to.
  def banner_text=(_arg0); end

  # Public: Tired of seeing the awesome message about Cloud? Set this to
  # false and it will go away. Defaults to true.
  def cloud_recommendation; end

  # Public: Tired of seeing the awesome message about Cloud? Set this to
  # false and it will go away. Defaults to true.
  def cloud_recommendation=(_arg0); end

  # Returns the value of attribute delete.
  def delete; end

  # Public: If you set this, Flipper::UI will fetch descriptions
  # from your external source. Descriptions for `features` will be shown on `feature`
  # page, and optionally the `features` pages. Defaults to empty block.
  def descriptions_source; end

  # Public: If you set this, Flipper::UI will fetch descriptions
  # from your external source. Descriptions for `features` will be shown on `feature`
  # page, and optionally the `features` pages. Defaults to empty block.
  def descriptions_source=(_arg0); end

  # Public: Is feature creation allowed from the UI? Defaults to true. If
  # set to false, users of the UI cannot create features. All feature
  # creation will need to be done through the configured flipper instance.
  def feature_creation_enabled; end

  # Public: Is feature creation allowed from the UI? Defaults to true. If
  # set to false, users of the UI cannot create features. All feature
  # creation will need to be done through the configured flipper instance.
  def feature_creation_enabled=(_arg0); end

  # Public: Is feature deletion allowed from the UI? Defaults to true. If
  # set to false, users won't be able to delete features from the UI.
  def feature_removal_enabled; end

  # Public: Is feature deletion allowed from the UI? Defaults to true. If
  # set to false, users won't be able to delete features from the UI.
  def feature_removal_enabled=(_arg0); end

  # Public: Are you feeling lucky? Defaults to true. If set to false, users
  # won't see a videoclip of Taylor Swift when there aren't any features
  def fun; end

  # Public: Are you feeling lucky? Defaults to true. If set to false, users
  # won't see a videoclip of Taylor Swift when there aren't any features
  def fun=(_arg0); end

  # Public: Should feature descriptions be show on the `features` list page.
  # Default false. Only works when using descriptions.
  def show_feature_description_in_list; end

  # Public: Should feature descriptions be show on the `features` list page.
  # Default false. Only works when using descriptions.
  def show_feature_description_in_list=(_arg0); end

  # @return [Boolean]
  def show_feature_description_in_list?; end

  # @return [Boolean]
  def using_descriptions?; end
end

Flipper::UI::Configuration::DEFAULT_DESCRIPTIONS_SOURCE = T.let(T.unsafe(nil), Proc)
Flipper::UI::Configuration::VALID_BANNER_CLASS_VALUES = T.let(T.unsafe(nil), Array)
module Flipper::UI::Decorators; end

class Flipper::UI::Decorators::Feature < ::SimpleDelegator
  include ::Comparable

  def <=>(other); end
  def color_class; end

  # Internal: Used to preload description if descriptions_source is
  # configured for Flipper::UI.
  def description; end

  # Internal: Used to preload description if descriptions_source is
  # configured for Flipper::UI.
  def description=(_arg0); end

  # Public: The feature being decorated.
  def feature; end

  def gate_state_title; end
  def gates_in_words; end
  def pretty_enabled_gate_names; end

  # Public: Returns name titleized.
  def pretty_name; end
end

Flipper::UI::Decorators::Feature::StateSortMap = T.let(T.unsafe(nil), Hash)

class Flipper::UI::Decorators::Gate < ::SimpleDelegator
  # @return [Gate] a new instance of Gate
  def initialize(gate, value = T.unsafe(nil)); end

  # Public: Returns instance as hash that is ready to be json dumped.
  def as_json; end

  # Public: The gate being decorated.
  def gate; end

  # Public: The value for the gate from the adapter.
  def value; end
end

# All flipper ui errors inherit from this.
class Flipper::UI::Error < ::StandardError; end

class Flipper::UI::Middleware
  # @return [Middleware] a new instance of Middleware
  def initialize(app, options = T.unsafe(nil)); end

  def call(env); end
  def call!(env); end
end

class Flipper::UI::Option
  # @return [Option] a new instance of Option
  def initialize(title, description); end

  # Returns the value of attribute description.
  def description; end

  # Sets the attribute description
  #
  # @param value the value to set the attribute description to.
  def description=(_arg0); end

  # Returns the value of attribute title.
  def title; end

  # Sets the attribute title
  #
  # @param value the value to set the attribute title to.
  def title=(_arg0); end
end

# Raised when a request method (get, post, etc.) is called for an action
# that does not know how to handle it.
class Flipper::UI::RequestMethodNotSupported < ::Flipper::UI::Error; end

module Flipper::UI::Util
  class << self
    # @return [Boolean]
    def blank?(str); end

    def pluralize(count, singular, plural); end

    # @return [Boolean]
    def present?(str); end

    def titleize(str); end
    def to_sentence(array, options = T.unsafe(nil)); end
    def truncate(str, length: T.unsafe(nil)); end
  end
end

# Private: 0x3000: fullwidth whitespace
Flipper::UI::Util::NON_WHITESPACE_REGEXP = T.let(T.unsafe(nil), Regexp)
