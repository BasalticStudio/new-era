# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sassc-rails` gem.
# Please instead update this file by running `bin/tapioca gem sassc-rails`.

module SassC
  class << self
    # The global load paths for Sass files. This is meant for plugins and
    # libraries to register the paths to their Sass stylesheets to that they may
    # be `@imported`. This load path is used by every instance of {Sass::Engine}.
    # They are lower-precedence than any load paths passed in via the
    # {file:SASS_REFERENCE.md#load_paths-option `:load_paths` option}.
    #
    # If the `SASS_PATH` environment variable is set,
    # the initial value of `load_paths` will be initialized based on that.
    # The variable should be a colon-separated list of path names
    # (semicolon-separated on Windows).
    #
    # Note that files on the global load path are never compiled to CSS
    # themselves, even if they aren't partials. They exist only to be imported.
    #
    # @example
    #   SassC.load_paths << File.dirname(__FILE__ + '/sass')
    # @return [Array<String, Pathname, Sass::Importers::Base>]
    def load_paths; end
  end
end

module SassC::Rails; end

class SassC::Rails::Importer < ::SassC::Importer
  def imports(path, parent_path); end

  private

  def context; end
  def extension_for_file(file); end
  def glob_imports(base, glob, current_file); end

  # @raise [ArgumentError]
  def globbed_files(base, glob); end

  def load_paths; end
  def record_import_as_dependency(path); end
end

class SassC::Rails::Importer::CSSExtension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Importer::CssSassExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Importer::CssScssExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Importer::ERBExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
end

SassC::Rails::Importer::EXTENSIONS = T.let(T.unsafe(nil), Array)

class SassC::Rails::Importer::Extension
  # @return [Extension] a new instance of Extension
  def initialize(postfix = T.unsafe(nil)); end

  def import_for(full_path, parent_dir, options); end

  # Returns the value of attribute postfix.
  def postfix; end
end

SassC::Rails::Importer::GLOB = T.let(T.unsafe(nil), Regexp)
SassC::Rails::Importer::PREFIXS = T.let(T.unsafe(nil), Array)

class SassC::Rails::Importer::SassERBExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Railtie < ::Rails::Railtie; end

class SassC::Rails::SassTemplate < ::Sprockets::SassProcessor
  # @return [SassTemplate] a new instance of SassTemplate
  def initialize(options = T.unsafe(nil), &block); end

  def call(input); end
  def config_options; end

  # @return [Boolean]
  def line_comments?; end

  def load_paths; end
  def safe_merge(_key, left, right); end
  def sass_style; end
end

# The methods in the Functions module were copied here from sprockets in order to
# override the Value class names (e.g. ::SassC::Script::Value::String)
module SassC::Rails::SassTemplate::Functions
  def asset_data_url(path); end
  def asset_path(path, options = T.unsafe(nil)); end
  def asset_url(path, options = T.unsafe(nil)); end
end

class SassC::Rails::ScssTemplate < ::SassC::Rails::SassTemplate
  class << self
    def syntax; end
  end
end

SassC::Rails::VERSION = T.let(T.unsafe(nil), String)
SassC::VERSION = T.let(T.unsafe(nil), String)

module Sprockets
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathUtils
  extend ::Sprockets::DigestUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::Exporting
  extend ::Sprockets::ProcessorUtils
  extend ::Sprockets::Processing
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::Transformers
  extend ::Sprockets::Mime
  extend ::Sprockets::Paths
  extend ::Sprockets::Configuration
end

class Sprockets::SassCompressor
  # @return [SassCompressor] a new instance of SassCompressor
  def initialize(options = T.unsafe(nil)); end

  def cache_key; end
  def call(*args); end

  # sprockets 2.x
  def evaluate(*args); end

  class << self
    def cache_key; end
    def call(input); end
    def instance; end
  end
end

Sprockets::SassCompressor::VERSION = T.let(T.unsafe(nil), String)
Sprockets::SassFunctions = Sprockets::SassProcessor::Functions
Sprockets::VERSION = T.let(T.unsafe(nil), String)
