# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `liveness` gem.
# Please instead update this file by running `bin/tapioca gem liveness`.

# The Rack middleware to provide health check endpoints.
#
# @since 0.1.0
module Liveness
  private

  # @return [Liveness::Config]
  # @since 0.1.0
  def config(&block); end

  # @return [Liveness::Container]
  # @since 0.1.0
  def container; end

  class << self
    # @return [Liveness::Config]
    # @since 0.1.0
    def config(&block); end

    # @return [Liveness::Container]
    # @since 0.1.0
    def container; end
  end
end

# Access Control
#
# @since 0.3.0
class Liveness::Access
  # @param request [Rack::Request]
  # @param config [Liveness::Config]
  # @return [Access] a new instance of Access
  # @since 0.3.0
  def initialize(request, config:); end

  # Is allowed to access
  #
  # @return [Boolean]
  # @since 0.3.0
  def allowed?; end

  # Is token valid
  #
  # @return [Boolean]
  # @since 0.3.0
  def valid_token?; end

  # Is ip in whitelist
  #
  # @return [Boolean]
  # @since 0.3.0
  def whitelist?; end
end

# Config of liveness
class Liveness::Config
  # @return [Liveness::Config]
  # @since 0.1.0
  def initialize(container: T.unsafe(nil), &block); end

  # Add dependency config
  #
  # @param name [Symbol] the dependency name
  # @param options [Hash] the dependency options
  # @param block [Proc] the block for config dependency
  # @since 0.1.0
  def add(name, **options, &block); end

  # @since 0.1.0
  def dependencies; end

  # @since 0.3.0
  def ip_whitelist; end

  # @since 0.3.0
  def ip_whitelist=(_arg0); end

  # @since 0.3.0
  def token; end

  # @since 0.3.0
  def token=(_arg0); end
end

# The dependency provider container
#
# @since 0.1.0
class Liveness::Container
  # @return [Liveness::Container]
  # @since 0.1.0
  def initialize; end

  # Create a dependency
  #
  # @param name [Symbol] the dependency name
  # @param block [Proc] the block to configure dependency
  # @return [Liveness::Dependency|NilClass]
  # @since 0.1.0
  def create(name, **options, &block); end

  # Register new dependency type
  #
  # @param name [Symbol] the dependency name
  # @param klass [Class] the class to register
  # @since 0.1.0
  def register(name, klass); end
end

# The dependency providers
#
# @since 0.1.0
module Liveness::Dependencies; end

# The MySQL Provider
#
# @since 0.1.0
class Liveness::Dependencies::MySQL < ::Liveness::Dependency
  # @see [Liveness::Dependency#check!]
  # @since 0.1.0
  def check!; end
end

# The PostgreSQL Provider
#
# @since 0.1.0
class Liveness::Dependencies::PostgreSQL < ::Liveness::Dependency
  # @see [Liveness::Dependency#check!]
  # @since 0.1.0
  def check!; end
end

# The PostgreSQL Provider
#
# @since 0.2.0
class Liveness::Dependencies::Redis < ::Liveness::Dependency
  # @see [Liveness::Dependency#check!]
  # @since 0.2.0
  def check!; end
end

# The required dependency for services
#
# @since 0.1.0
class Liveness::Dependency
  # @return [Dependency] a new instance of Dependency
  # @since 0.1.0
  def initialize(name: T.unsafe(nil), timeout: T.unsafe(nil), &block); end

  # Check the dependency service alive
  #
  # @return [Boolean]
  # @since 0.1.0
  def alive?; end

  # Check the dependency service alive
  #
  # @raise [NotImplementedError]
  # @return [Boolean]
  # @since 0.1.0
  def check!; end

  # Connect with connector
  #
  # @return [Object]
  # @since 0.2.0
  def connect; end

  # @since 0.1.0
  def name; end

  # @since 0.1.0
  def name=(_arg0); end

  # Return status
  #
  # @return [Hash]
  # @since 0.2.0
  def status; end

  # @since 0.1.0
  def timeout; end

  # @since 0.1.0
  def timeout=(_arg0); end
end

# @since 0.1.0
Liveness::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# The status endpoint to return check status
#
# @since 0.1.0
class Liveness::Status
  # @return [Liveness::Status]
  # @since 0.1.0
  def initialize(env, config: T.unsafe(nil)); end

  # @return [Rack::Response]
  # @since 0.3.0
  def forbidden; end

  # The Liveness status
  #
  # @return [Boolean]
  # @since 0.1.0
  def live?; end

  # The depend services status
  #
  # @return [Hash]
  # @since 0.1.0
  def metrics; end

  # @return [Rack::Response]
  # @since 0.1.0
  def response; end

  class << self
    # @since 0.1.0
    def call(env); end
  end
end

# @since 0.3.0
Liveness::Status::FORBIDDEN_MESSAGE = T.let(T.unsafe(nil), Hash)

# @since 0.3.0
Liveness::Status::HEADERS = T.let(T.unsafe(nil), Hash)

Liveness::VERSION = T.let(T.unsafe(nil), String)
