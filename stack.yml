version: '3.8'

x-application: &application
  image: "${IMAGE_NAME}:${IMAGE_TAG}"
  environment:
    - AUTO_MIGRATION=yes
    - DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB
    - REDIS_URL=redis://redis:6379 # NOTE: Create standalone Redis for cache for scale
    - SECRET_KEY_BASE
    - STATUS_CHECK_TOKEN
    - SENTRY_DSN
    - SENTRY_ENVIRONMENT
    - SETTINGS__REGISTER_ALLOWLIST__SPREADSHEET_KEY
  secrets:
    - source: new-era_spreadsheet-service_account
      target: /src/app/config/credentials/spreadsheet-service_account.json
  depends_on:
    - postgres
    - redis

services:
  postgres:
    image: postgres:14.3-alpine
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    deploy:
      placement:
        constraints:
          - node.role != manager
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - net
  redis:
    image: redis:7-alpine
    deploy:
      placement:
        constraints:
          - node.role != manager
    volumes:
      - redis_data:/data
    networks:
      - net
  application:
    <<: *application
    networks:
      - net
      - traefik-public
    deploy:
      placement:
        constraints:
          - node.role != manager
      update_config:
        parallelism: 2
        delay: 3s
        order: start-first
        failure_action: rollback
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        # Hosts
        - "traefik.http.routers.${DEPLOY_NAME}-http.rule=Host(`${DEPLOY_DOMAIN}`)"
        - "traefik.http.routers.${DEPLOY_NAME}-http.entrypoints=web"
        - "traefik.http.routers.${DEPLOY_NAME}-http.middlewares=https-redirect"
        - "traefik.http.routers.${DEPLOY_NAME}-https.rule=Host(`${DEPLOY_DOMAIN}`)"
        - "traefik.http.routers.${DEPLOY_NAME}-https.entrypoints=websecure"
        - "traefik.http.routers.${DEPLOY_NAME}-https.tls=true"
        - "traefik.http.routers.${DEPLOY_NAME}-https.tls.certresolver=letsencrypt"
        - "traefik.http.routers.${DEPLOY_NAME}-https.tls.domains[0].sans=*.${DEPLOY_BASE_DOMAIN}"
        - "traefik.http.services.${DEPLOY_NAME}.loadbalancer.server.port=3000"
        - "traefik.http.services.${DEPLOY_NAME}.loadbalancer.sticky.cookie=true"
        - "traefik.http.services.${DEPLOY_NAME}.loadbalancer.healthcheck.path=/status?token=${STATUS_CHECK_TOKEN}"
  sidekiq:
    <<: *application
    networks:
      - net
    deploy:
      placement:
        constraints:
          - node.role != manager
      update_config:
        parallelism: 2
        delay: 3s
        order: start-first
        failure_action: rollback

volumes:
  postgres_data:
    driver_opts:
      type: "nfs"
      o: "addr=$NFS_SERVER,rw,async,vers=4"
      device: ":$POSTGRES_VOLUME_PATH"
  redis_data:
    driver_opts:
      type: "nfs"
      o: "addr=$NFS_SERVER,rw,async,vers=4"
      device: ":$REDIS_VOLUME_PATH"

networks:
  net:
    driver: overlay
    attachable: true
  traefik-public:
    external: true

secrets:
  new-era_spreadsheet-service_account:
    external: true
